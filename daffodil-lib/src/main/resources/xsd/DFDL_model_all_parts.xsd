<?xml version="1.0" encoding="UTF-8"?>
<!-- 

Note: This schema used to include DFDL_part2... which included DFDL_part1.

I have been unable to get this to work with the XML Catalog support currently.
I am not sure why, but a workaround (short term, or long) is to just pre merge 
the files so we are not depending on the nested includes working.

So what you see below is the content first of DFDL_part1_simpletypes.xsd merged in here,
followed by the contents of DFDL_part2_attributes.xsd, and then the original 
content of this file.

 -->
<!--
  ******************************************************************
  * (C) Copyright IBM Corp 2011
  * All Rights Reserved
  *
  * This XML schema is 3 of 3 that defines the syntax of DFDL annotations.
  * It defines the annotations themselves.
  *
  * DFDL Version 1.0
  * Schema Version 1.0
  ******************************************************************
-->
<xsd:schema targetNamespace="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dafint="urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:int"
  attributeFormDefault="unqualified" elementFormDefault="qualified"
  xsi:schemaLocation="http://www.w3.org/2001/XMLSchema XMLSchema.xsd ">

  <xsd:import namespace="urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:int"
    schemaLocation="dafint.xsd"/>
    
 <!-- ============================================================= -->
  <!-- Base DFDL Data types -->
  <!-- ============================================================= -->

  <xsd:simpleType name="DFDLExpression">
    <xsd:annotation>
      <xsd:documentation>A subset of XPath 2.0 expressions for use in
        properties</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:token">
      <xsd:pattern value="(\{[^\{].*\})|(\{\})" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="EmptyString">
    <xsd:annotation>
      <xsd:documentation>Matches the empty string only. No toleration of
        whitespace.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:whiteSpace value="preserve" />
      <xsd:length value="0" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DFDLExpressionOrNothing">
    <xsd:annotation>
      <xsd:documentation>An expression, or nothing at all.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="dfdl:EmptyString dfdl:DFDLExpression" />
    <!--
      2012-01-04 mbeckerle - If you change the order of this union,
      it stops enforcing the empty string aspect.
      Reverse the order and then just empty whitespace will validate.
    -->
  </xsd:simpleType>

  <xsd:simpleType name="DFDLExpressionOrPatternOrNothing">
    <xsd:annotation>
      <xsd:documentation>An expression, a regex, or nothing at all.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union
      memberTypes="dfdl:EmptyString dfdl:DFDLExpression dfdl:DFDLRegularExpression" />
    <!--
      2012-01-04 mbeckerle - If you change the order of this union,
      it stops enforcing the empty string aspect.
      Reverse the order and then just empty whitespace will validate.
    -->
  </xsd:simpleType>

  <xsd:simpleType name="DFDLStringLiteral">
    <xsd:restriction base="xsd:string">
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ListOfDFDLStringLiteral">
    <xsd:list itemType="xsd:token" />
  </xsd:simpleType>

  <xsd:simpleType name="DFDLNonNegativeInteger">
    <xsd:restriction base="xsd:int">
      <xsd:minInclusive value="0" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DFDLRegularExpression">
    <xsd:restriction base="xsd:string">
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DFDLQName">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="xsd:QName" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:length value="0" />
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <!-- ============================================================= -->
  <!-- Restrictions of base DFDL Data types -->
  <!-- ============================================================= -->

  <!-- A positive integer or 'implicit' for schema specification -->
  <xsd:simpleType name="AlignmentType">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="implicit" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLNonNegativeInteger">
          <xsd:minInclusive value="1" />
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <!-- ========================================================== -->
  <!-- DFDL Enumerations -->
  <!-- ========================================================= -->

  <xsd:simpleType name="EncodingEnum">
    <xsd:restriction base="xsd:string">
      <!-- IANA charsets or CCIDSs -->
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextStringJustificationEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="left" />
      <xsd:enumeration value="right" />
      <xsd:enumeration value="center" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextNumberJustificationEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="left" />
      <xsd:enumeration value="right" />
      <xsd:enumeration value="center" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextNumberRoundingEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="pattern" />
      <xsd:enumeration value="explicit" />
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="SignCodingValue">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="twosComplement" />
      <xsd:enumeration value="onesComplement" />
      <xsd:enumeration value="signMagnitude" />
      <xsd:enumeration value="unsignedBinary" />
      <xsd:enumeration value="unsignedDecimal" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="RepresentationEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="binary" />
      <xsd:enumeration value="text" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextPadKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none" />
      <xsd:enumeration value="padChar" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextTrimKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none" />
      <xsd:enumeration value="padChar" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="EscapeKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="escapeCharacter" />
      <xsd:enumeration value="escapeBlock" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="GenerateEscapeEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="always" />
      <xsd:enumeration value="whenNeeded" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextBidiTextOrderingEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="implicit" />
      <xsd:enumeration value="visual" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextBidiOrientationEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="LTR" />
      <xsd:enumeration value="RTL" />
      <xsd:enumeration value="contextual_LTR" />
      <xsd:enumeration value="contextual_RTL" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextBidiNumeralShapesEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="nominal" />
      <xsd:enumeration value="national" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextNumberRepEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="standard" />
      <xsd:enumeration value="zoned" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextNumberCheckPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="strict" />
      <xsd:enumeration value="lax" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="CalendarCheckPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="strict" />
      <xsd:enumeration value="lax" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextNumberBaseEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="2" />
      <xsd:enumeration value="8" />
      <xsd:enumeration value="10" />
      <xsd:enumeration value="16" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextNumberRoundingModeEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="roundCeiling" />
      <xsd:enumeration value="roundFloor" />
      <xsd:enumeration value="roundDown" />
      <xsd:enumeration value="roundUp" />
      <xsd:enumeration value="roundHalfEven" />
      <xsd:enumeration value="roundHalfDown" />
      <xsd:enumeration value="roundHalfUp" />
      <xsd:enumeration value="roundUnnecessary" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextZonedSignStyleEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="asciiStandard" />
      <xsd:enumeration value="asciiTranslatedEBCDIC" />
      <xsd:enumeration value="asciiCARealiaModified" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="BinaryNumberRepEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="packed" />
      <xsd:enumeration value="bcd" />
      <xsd:enumeration value="binary" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="BinaryNumberCheckPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="strict" />
      <xsd:enumeration value="lax" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="BinaryFloatRepEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ieee" />
      <xsd:enumeration value="ibm390Hex" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextBooleanJustificationEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="left" />
      <xsd:enumeration value="right" />
      <xsd:enumeration value="center" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TextCalendarJustificationEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="left" />
      <xsd:enumeration value="right" />
      <xsd:enumeration value="center" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="CalendarPatternKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="explicit" />
      <xsd:enumeration value="implicit" />
    </xsd:restriction>
  </xsd:simpleType>

  <!-- A pattern is used instead of an enumeration for compactness -->
  <xsd:simpleType name="CalendarTimeZoneType">
    <xsd:restriction base="xsd:string" />
  </xsd:simpleType>

  <!-- A pattern is used instead of an enumeration for compactness -->
  <xsd:simpleType name="CalendarLanguageType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="([A-Za-z]{1,8}([-_][A-Za-z0-9]{1,8})*)" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="CalendarFirstDayOfWeekEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Monday" />
      <xsd:enumeration value="Tuesday" />
      <xsd:enumeration value="Wednesday" />
      <xsd:enumeration value="Thursday" />
      <xsd:enumeration value="Friday" />
      <xsd:enumeration value="Saturday" />
      <xsd:enumeration value="Sunday" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="BinaryCalendarRepEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="packed" />
      <xsd:enumeration value="bcd" />
      <xsd:enumeration value="binarySeconds" />
      <xsd:enumeration value="binaryMilliseconds" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="LengthKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="explicit" />
      <xsd:enumeration value="delimited" />
      <xsd:enumeration value="implicit" />
      <xsd:enumeration value="prefixed" />
      <xsd:enumeration value="endOfParent" />
      <xsd:enumeration value="pattern" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="NilKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="literalValue" />
      <xsd:enumeration value="logicalValue" />
      <xsd:enumeration value="literalCharacter" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="NilValueDelimiterPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none" />
      <xsd:enumeration value="initiator" />
      <xsd:enumeration value="terminator" />
      <xsd:enumeration value="both" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="EmptyValueDelimiterPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none" />
      <xsd:enumeration value="initiator" />
      <xsd:enumeration value="terminator" />
      <xsd:enumeration value="both" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SequenceKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ordered" />
      <xsd:enumeration value="unordered" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="LengthUnitsEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="bits" />
      <xsd:enumeration value="bytes" />
      <xsd:enumeration value="characters" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="AlignmentUnitsEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="bits" />
      <xsd:enumeration value="bytes" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="GenerateQuotesEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="always" />
      <xsd:enumeration value="whenNeeded" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SeparatorPositionEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="infix" />
      <xsd:enumeration value="prefix" />
      <xsd:enumeration value="postfix" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SeparatorPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="required" />
      <xsd:enumeration value="suppressed" />
      <xsd:enumeration value="suppressedAtEndStrict" />
      <xsd:enumeration value="suppressedAtEndLax" />
    </xsd:restriction>
  </xsd:simpleType>
  
  <xsd:simpleType name="SeparatorSuppressionPolicyEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="never" />
      <xsd:enumeration value="trailingEmpty" />
      <xsd:enumeration value="trailingEmptyStrict" />
      <xsd:enumeration value="anyEmpty" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ChoiceLengthKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="implicit" />
      <xsd:enumeration value="explicit" />
    </xsd:restriction>

  </xsd:simpleType>

  <xsd:simpleType name="OccursCountKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="fixed" />
      <xsd:enumeration value="expression" />
      <xsd:enumeration value="parsed" />
      <xsd:enumeration value="stopValue" />
      <xsd:enumeration value="implicit" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ByteOrderEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="littleEndian" />
      <xsd:enumeration value="bigEndian" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="YesNoEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="yes" />
      <xsd:enumeration value="no" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="UTF16WidthEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="fixed" />
      <xsd:enumeration value="variable" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TestKindEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="expression" />
      <xsd:enumeration value="pattern" />
    </xsd:restriction>
  </xsd:simpleType>

  <!-- A pattern is used instead of an enumeration for compactness -->
  <xsd:simpleType name="BinaryPackedSignCodes">
    <xsd:restriction base="dfdl:DFDLStringLiteral">
      <!--
        A space separated string giving the hex sign nibbles to use for a 
        positive
        value, a negative value, an unsigned value, and zero.
        Valid values for positive nibble: A, C, E, F
        Valid values for negative nibble: B, D
        Valid values for unsigned nibble: F
        Valid values for zero sign: A C E F 0
        Example: C D F C (typical S/390 usage)
        Example: C D F 0 (handle special case for zero)
      -->
      <xsd:pattern value="(A|C|E|F) (B|D) (F) (A|C|E|F|0)" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="CalendarDaysInFirstWeek">
    <xsd:restriction base="dfdl:DFDLNonNegativeInteger">
      <xsd:minInclusive value="1" />
      <xsd:maxInclusive value="7" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="CalendarCenturyStart">
    <xsd:restriction base="dfdl:DFDLNonNegativeInteger">
      <xsd:minInclusive value="0" />
      <xsd:maxInclusive value="99" />
    </xsd:restriction>
  </xsd:simpleType>

  <!-- ============================================================= -->
  <!-- Simple types with DFDL Expression -->
  <!-- ============================================================= -->

  <xsd:simpleType name="ByteOrderEnum_Or_DFDLExpression">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLExpression" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:ByteOrderEnum" />
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <xsd:simpleType name="EncodingEnum_Or_DFDLExpression">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLExpression" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:EncodingEnum" />
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <xsd:simpleType name="BinaryFloatRepEnum_Or_DFDLExpression">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLExpression" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:BinaryFloatRepEnum" />
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <xsd:simpleType name="DFDLStringLiteral_Or_DFDLExpression">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLExpression" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLStringLiteral" />
      </xsd:simpleType>

    </xsd:union>
  </xsd:simpleType>

  <xsd:simpleType name="ListOfDFDLStringLiteral_Or_DFDLExpression">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLExpression" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:ListOfDFDLStringLiteral" />
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <xsd:simpleType name="DFDLNonNegativeInteger_Or_DFDLExpression">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLExpression" />
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="dfdl:DFDLNonNegativeInteger" />
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  
  <!-- ==================================================================== -->
  <!-- Basic Attributes and Attribute Groups representing DFDL properties -->
  <!-- ==================================================================== -->

  <xsd:attribute name="ref" type="xsd:QName" />

  <xsd:attributeGroup name="BaseAG">
    <xsd:attribute name="ref" type="xsd:QName" />
  </xsd:attributeGroup>

  <!-- 11 Properties Common to Both Content and Framing -->
  <xsd:attribute name="byteOrder"
    type="dfdl:ByteOrderEnum_Or_DFDLExpression" />
  <xsd:attribute name="encoding"
    type="dfdl:EncodingEnum_Or_DFDLExpression" />
  <xsd:attribute name="utf16Width" type="dfdl:UTF16WidthEnum" />
  <xsd:attribute name="ignoreCase" type="dfdl:YesNoEnum" />

  <xsd:attributeGroup name="CommonAG">
    <xsd:attribute name="byteOrder"
      type="dfdl:ByteOrderEnum_Or_DFDLExpression" />
    <xsd:attribute name="encoding"
      type="dfdl:EncodingEnum_Or_DFDLExpression" />
    <xsd:attribute name="utf16Width" type="dfdl:UTF16WidthEnum" />
    <xsd:attribute name="ignoreCase" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- 12.1 Aligned Data -->
  <xsd:attribute name="alignment" type="dfdl:AlignmentType" />
  <xsd:attribute name="alignmentUnits" type="dfdl:AlignmentUnitsEnum" />
  <xsd:attribute name="fillByte" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="leadingSkip" type="dfdl:DFDLNonNegativeInteger" />
  <xsd:attribute name="trailingSkip" type="dfdl:DFDLNonNegativeInteger" />

  <xsd:attributeGroup name="AlignmentAG">
    <xsd:attribute name="alignment" type="dfdl:AlignmentType" />
    <xsd:attribute name="alignmentUnits" type="dfdl:AlignmentUnitsEnum" />
    <xsd:attribute name="fillByte" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="leadingSkip" type="dfdl:DFDLNonNegativeInteger" />
    <xsd:attribute name="trailingSkip" type="dfdl:DFDLNonNegativeInteger" />
  </xsd:attributeGroup>

  <!-- 12.2 Delimiters and Text Mark up -->
  <xsd:attribute name="initiator"
    type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="terminator"
    type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="outputNewLine" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="emptyValueDelimiterPolicy" type="dfdl:EmptyValueDelimiterPolicyEnum" />

  <xsd:attributeGroup name="MarkupAG">
    <xsd:attribute name="initiator"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="terminator"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="outputNewLine" type="dfdl:DFDLStringLiteral" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="NonGroupMarkupAG">
    <xsd:attribute name="emptyValueDelimiterPolicy"
      type="dfdl:EmptyValueDelimiterPolicyEnum" />
  </xsd:attributeGroup>

  <!-- 12.3 Length Properties -->
  <xsd:attribute name="lengthKind" type="dfdl:LengthKindEnum" />
  <xsd:attribute name="length"
    type="dfdl:DFDLNonNegativeInteger_Or_DFDLExpression" />
  <xsd:attribute name="lengthPattern" type="dfdl:DFDLRegularExpression" />
  <xsd:attribute name="lengthUnits" type="dfdl:LengthUnitsEnum" />
  <xsd:attribute name="prefixIncludesPrefixLength" type="dfdl:YesNoEnum" />
  <xsd:attribute name="prefixLengthType" type="xsd:QName" />

  <xsd:attributeGroup name="LengthAG">
    <xsd:attribute name="lengthKind" type="dfdl:LengthKindEnum" />
    <xsd:attribute name="length"
      type="dfdl:DFDLNonNegativeInteger_Or_DFDLExpression" />
    <xsd:attribute name="lengthPattern" type="dfdl:DFDLRegularExpression" />
    <xsd:attribute name="lengthUnits" type="dfdl:LengthUnitsEnum" />
    <xsd:attribute name="prefixIncludesPrefixLength" type="dfdl:YesNoEnum" />
    <xsd:attribute name="prefixLengthType" type="xsd:QName" />
  </xsd:attributeGroup>

  <!-- 13 Simple Types -->
  <xsd:attribute name="representation" type="dfdl:RepresentationEnum" />

  <xsd:attributeGroup name="RepresentationAG">
    <xsd:attribute name="representation" type="dfdl:RepresentationEnum" />
  </xsd:attributeGroup>

  <!-- 14.4 Simple or complex local element or element reference -->
  <xsd:attribute name="floating" type="dfdl:YesNoEnum" />

  <xsd:attributeGroup name="FloatingAG">
    <xsd:attribute name="floating" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!--13.2 Properties Common to All Simple Types with Text representation -->
  <xsd:attribute name="textPadKind" type="dfdl:TextPadKindEnum" />
  <xsd:attribute name="textTrimKind" type="dfdl:TextTrimKindEnum" />
  <xsd:attribute name="textOutputMinLength" type="dfdl:DFDLNonNegativeInteger" />
  <xsd:attribute name="escapeSchemeRef" type="xsd:QName" />

  <xsd:attributeGroup name="SimpleTypesTextAG">
    <xsd:attribute name="textPadKind" type="dfdl:TextPadKindEnum" />
    <xsd:attribute name="textTrimKind" type="dfdl:TextTrimKindEnum" />
    <xsd:attribute name="textOutputMinLength" type="dfdl:DFDLNonNegativeInteger" />
    <xsd:attribute name="escapeSchemeRef" type="dfdl:DFDLQName" />
  </xsd:attributeGroup>

  <!-- 13.2.1 Escape Scheme -->
  <!-- Note that these can never appear in short form -->
  <xsd:attributeGroup name="EscapeSchemeAG">
    <xsd:attribute name="escapeKind" type="dfdl:EscapeKindEnum" />
    <xsd:attribute name="escapeCharacter"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="escapeBlockStart" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="escapeBlockEnd" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="escapeEscapeCharacter"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="extraEscapedCharacters" type="dfdl:ListOfDFDLStringLiteral" />
    <xsd:attribute name="generateEscapeBlock" type="dfdl:GenerateEscapeEnum" />
  </xsd:attributeGroup>

  <!-- 13.3 Properties for Bidirectional support for all Simple Types with 
    Text representation -->
  <xsd:attribute name="textBidi" type="dfdl:YesNoEnum" />
  <xsd:attribute name="textBidiTextOrdering" type="dfdl:TextBidiTextOrderingEnum" />
  <xsd:attribute name="textBidiOrientation" type="dfdl:TextBidiOrientationEnum" />
  <xsd:attribute name="textBidiSymmetric" type="dfdl:YesNoEnum" />
  <xsd:attribute name="textBidiTextShaped" type="dfdl:YesNoEnum" />
  <xsd:attribute name="textBidiNumeralShapes" type="dfdl:TextBidiNumeralShapesEnum" />

  <xsd:attributeGroup name="TextBidiSchemeAG">
    <xsd:attribute name="textBidi" type="dfdl:YesNoEnum" />
    <xsd:attribute name="textBidiTextOrdering" type="dfdl:TextBidiTextOrderingEnum" />
    <xsd:attribute name="textBidiOrientation" type="dfdl:TextBidiOrientationEnum" />
    <xsd:attribute name="textBidiSymmetric" type="dfdl:YesNoEnum" />
    <xsd:attribute name="textBidiTextShaped" type="dfdl:YesNoEnum" />
    <xsd:attribute name="textBidiNumeralShapes" type="dfdl:TextBidiNumeralShapesEnum" />
  </xsd:attributeGroup>

  <!-- 13.4 Properties Specific to Strings with Text representation -->
  <xsd:attribute name="textStringJustification" type="dfdl:TextStringJustificationEnum" />
  <xsd:attribute name="textStringPadCharacter" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="truncateSpecifiedLengthString"
    type="dfdl:YesNoEnum" />

  <xsd:attributeGroup name="StringTextAG">
    <xsd:attribute name="textStringJustification" type="dfdl:TextStringJustificationEnum" />
    <xsd:attribute name="textStringPadCharacter" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="truncateSpecifiedLengthString"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- Properties Specific to Number with Text or Binary representation -->
  <xsd:attribute name="decimalSigned" type="dfdl:YesNoEnum" />

  <xsd:attributeGroup name="NumberAG">
    <xsd:attribute name="decimalSigned" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- Properties Specific to Number with Text representation -->
  <xsd:attribute name="textNumberRep" type="dfdl:TextNumberRepEnum" />
  <xsd:attribute name="textNumberJustification" type="dfdl:TextNumberJustificationEnum" />
  <xsd:attribute name="textNumberPadCharacter" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="textStandardBase" type="dfdl:TextNumberBaseEnum" />

  <xsd:attributeGroup name="NumberTextAG">
    <xsd:attribute name="textNumberRep" type="dfdl:TextNumberRepEnum" />
    <xsd:attribute name="textNumberJustification" type="dfdl:TextNumberJustificationEnum" />
    <xsd:attribute name="textNumberPadCharacter" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="textStandardBase" type="dfdl:TextNumberBaseEnum" />
  </xsd:attributeGroup>

  <!-- Text number format attributes -->
  <xsd:attribute name="textNumberPattern" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="textStandardGroupingSeparator"
    type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="textStandardDecimalSeparator"
    type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="textStandardExponentRep"
    type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="textNumberCheckPolicy" type="dfdl:TextNumberCheckPolicyEnum" />
  <xsd:attribute name="textStandardInfinityRep" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="textStandardNaNRep" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="textNumberRoundingMode" type="dfdl:TextNumberRoundingModeEnum" />
  <xsd:attribute name="textNumberRounding" type="dfdl:TextNumberRoundingEnum" />
  <xsd:attribute name="textNumberRoundingIncrement" type="xsd:double" />
  <xsd:attribute name="textZonedSignStyle" type="dfdl:TextZonedSignStyleEnum" />
  <xsd:attribute name="textStandardZeroRep" type="dfdl:ListOfDFDLStringLiteral" />

  <xsd:attributeGroup name="TextNumberFormatAG">
    <xsd:attribute name="textNumberPattern" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="textStandardGroupingSeparator"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="textStandardDecimalSeparator"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="textStandardExponentRep"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="textNumberCheckPolicy" type="dfdl:TextNumberCheckPolicyEnum" />
    <xsd:attribute name="textStandardInfinityRep" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="textStandardNaNRep" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="textNumberRoundingMode" type="dfdl:TextNumberRoundingModeEnum" />
    <xsd:attribute name="textNumberRounding" type="dfdl:TextNumberRoundingEnum" />
    <xsd:attribute name="textNumberRoundingIncrement"
      type="xsd:double" />
    <xsd:attribute name="textZonedSignStyle" type="dfdl:TextZonedSignStyleEnum" />
    <xsd:attribute name="textStandardZeroRep" type="dfdl:ListOfDFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 13.6 Properties Specific to Number with Binary representation -->
  <xsd:attribute name="binaryNumberRep" type="dfdl:BinaryNumberRepEnum" />
  <xsd:attribute name="binaryDecimalVirtualPoint" type="xsd:int" />
  <xsd:attribute name="binaryPackedSignCodes" type="dfdl:BinaryPackedSignCodes" />
  <xsd:attribute name="binaryNumberCheckPolicy" type="dfdl:BinaryNumberCheckPolicyEnum" />

  <xsd:attributeGroup name="NumberBinaryAG">
    <xsd:attribute name="binaryNumberRep" type="dfdl:BinaryNumberRepEnum" />
    <xsd:attribute name="binaryDecimalVirtualPoint" type="xsd:int" />
    <xsd:attribute name="binaryPackedSignCodes" type="dfdl:BinaryPackedSignCodes" />
    <xsd:attribute name="binaryNumberCheckPolicy" type="dfdl:BinaryNumberCheckPolicyEnum" />
  </xsd:attributeGroup>

  <!-- 13.7 Float/Double with Binary representation -->
  <xsd:attribute name="binaryFloatRep"
    type="dfdl:BinaryFloatRepEnum_Or_DFDLExpression" />

  <xsd:attributeGroup name="FloatBinaryAG">
    <xsd:attribute name="binaryFloatRep"
      type="dfdl:BinaryFloatRepEnum_Or_DFDLExpression" />
  </xsd:attributeGroup>

  <!-- 13.8 Properties Specific to Boolean with Text representation -->
  <xsd:attribute name="textBooleanTrueRep"
    type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="textBooleanFalseRep"
    type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="textBooleanJustification" type="dfdl:TextBooleanJustificationEnum" />
  <xsd:attribute name="textBooleanPadCharacter" type="dfdl:DFDLStringLiteral" />

  <xsd:attributeGroup name="BooleanTextAG">
    <xsd:attribute name="textBooleanTrueRep"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="textBooleanFalseRep"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="textBooleanJustification"
      type="dfdl:TextBooleanJustificationEnum" />
    <xsd:attribute name="textBooleanPadCharacter" type="dfdl:DFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 13.9 Properties Specific to Boolean with Binary representation -->
  <xsd:attribute name="binaryBooleanTrueRep" type="dfdl:DFDLNonNegativeInteger" />
  <xsd:attribute name="binaryBooleanFalseRep" type="dfdl:DFDLNonNegativeInteger" />

  <xsd:attributeGroup name="BooleanBinaryAG">
    <xsd:attribute name="binaryBooleanTrueRep" type="dfdl:DFDLNonNegativeInteger" />
    <xsd:attribute name="binaryBooleanFalseRep" type="dfdl:DFDLNonNegativeInteger" />
  </xsd:attributeGroup>

  <!-- 13.10 Properties Specific to Calendar Format -->
  <xsd:attribute name="calendarPattern" type="dfdl:DFDLStringLiteral" />
  <xsd:attribute name="calendarPatternKind" type="dfdl:CalendarPatternKindEnum" />
  <xsd:attribute name="calendarCheckPolicy" type="dfdl:CalendarCheckPolicyEnum" />
  <xsd:attribute name="calendarTimeZone" type="dfdl:CalendarTimeZoneType" />
  <xsd:attribute name="calendarObserveDST" type="dfdl:YesNoEnum" />
  <xsd:attribute name="calendarFirstDayOfWeek" type="dfdl:CalendarFirstDayOfWeekEnum" />
  <xsd:attribute name="calendarDaysInFirstWeek" type="dfdl:CalendarDaysInFirstWeek" />
  <xsd:attribute name="calendarCenturyStart" type="dfdl:CalendarCenturyStart" />
  <xsd:attribute name="calendarLanguage" type="dfdl:CalendarLanguageType" />

  <xsd:attributeGroup name="CalendarFormatAG">
    <xsd:attribute name="calendarPattern" type="dfdl:DFDLStringLiteral" />
    <xsd:attribute name="calendarPatternKind" type="dfdl:CalendarPatternKindEnum" />
    <xsd:attribute name="calendarCheckPolicy" type="dfdl:CalendarCheckPolicyEnum" />
    <xsd:attribute name="calendarTimeZone" type="dfdl:CalendarTimeZoneType" />
    <xsd:attribute name="calendarObserveDST" type="dfdl:YesNoEnum" />
    <xsd:attribute name="calendarFirstDayOfWeek" type="dfdl:CalendarFirstDayOfWeekEnum" />
    <xsd:attribute name="calendarDaysInFirstWeek" type="dfdl:CalendarDaysInFirstWeek" />
    <xsd:attribute name="calendarCenturyStart" type="dfdl:CalendarCenturyStart" />
    <xsd:attribute name="calendarLanguage" type="dfdl:CalendarLanguageType" />
  </xsd:attributeGroup>

  <!-- 13.11 Properties Specific to Calendar with Text Representation -->
  <xsd:attribute name="textCalendarJustification" type="dfdl:TextCalendarJustificationEnum" />
  <xsd:attribute name="textCalendarPadCharacter" type="dfdl:DFDLStringLiteral" />

  <xsd:attributeGroup name="CalendarTextAG">
    <xsd:attribute name="textCalendarJustification"
      type="dfdl:TextCalendarJustificationEnum" />
    <xsd:attribute name="textCalendarPadCharacter" type="dfdl:DFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 13.12 Properties Specific to Calendar with Binary Representation -->
  <xsd:attribute name="binaryCalendarRep" type="dfdl:BinaryCalendarRepEnum" />
  <xsd:attribute name="binaryCalendarEpoch" type="xsd:string" />

  <xsd:attributeGroup name="CalendarBinaryAG">
    <xsd:attribute name="binaryCalendarRep" type="dfdl:BinaryCalendarRepEnum" />
    <xsd:attribute name="binaryCalendarEpoch" type="xsd:string" />
  </xsd:attributeGroup>

  <!-- 13.13 Properties Specific to Opaque Types (hexBinary) -->
  <xsd:attributeGroup name="OpaqueAG">
  </xsd:attributeGroup>

  <!-- 13.14 Properties for Nillable Elements -->
  <xsd:attribute name="nilKind" type="dfdl:NilKindEnum" />
  <xsd:attribute name="nilValue" type="dfdl:ListOfDFDLStringLiteral" />
  <xsd:attribute name="nilValueDelimiterPolicy" type="dfdl:NilValueDelimiterPolicyEnum" />

  <xsd:attributeGroup name="NillableAG">
    <xsd:attribute name="nilKind" type="dfdl:NilKindEnum" />
    <xsd:attribute name="nilValue" type="dfdl:ListOfDFDLStringLiteral" />
    <xsd:attribute name="nilValueDelimiterPolicy" type="dfdl:NilValueDelimiterPolicyEnum" />
  </xsd:attributeGroup>

  <!-- 13.15 Properties for Default Value Control -->
  <xsd:attribute name="useNilForDefault" type="dfdl:YesNoEnum" />

  <xsd:attributeGroup name="DefaultValueControlAG">
    <xsd:attribute name="useNilForDefault" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- 14 Sequence Groups -->
  <xsd:attribute name="sequenceKind" type="dfdl:SequenceKindEnum" />
  <xsd:attribute name="hiddenGroupRef" type="xsd:QName" />

  <xsd:attributeGroup name="SequenceAG">
    <xsd:attribute name="sequenceKind" type="dfdl:SequenceKindEnum" />
    <xsd:attribute name="hiddenGroupRef" type="xsd:QName" />
  </xsd:attributeGroup>

  <!-- 14.2 Sequence Groups with Delimiters -->
  <xsd:attribute name="separator"
    type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
  <xsd:attribute name="separatorPosition" type="dfdl:SeparatorPositionEnum" />
  <xsd:attribute name="separatorPolicy" type="dfdl:SeparatorPolicyEnum" />
  <xsd:attribute name="separatorSuppressionPolicy" type="dfdl:SeparatorSuppressionPolicyEnum" />  
  

  <xsd:attributeGroup name="SeparatorAG">
    <xsd:attribute name="separator"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute name="separatorPosition" type="dfdl:SeparatorPositionEnum" />
    <xsd:attribute name="separatorPolicy" type="dfdl:SeparatorPolicyEnum" />
    <xsd:attribute name="separatorSuppressionPolicy" type="dfdl:SeparatorSuppressionPolicyEnum" />  
  </xsd:attributeGroup>

  <xsd:attribute name="initiatedContent" type="dfdl:YesNoEnum" />
  <xsd:attributeGroup name="GroupCommonAG">
    <xsd:attribute name="initiatedContent" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- 15 Choices -->
  <xsd:attribute name="choiceLengthKind" type="dfdl:ChoiceLengthKindEnum" />
  <xsd:attribute name="choiceLength" type="dfdl:DFDLNonNegativeInteger" />

  <xsd:attributeGroup name="ChoiceAG">
    <xsd:attribute name="choiceLengthKind" type="dfdl:ChoiceLengthKindEnum" />
    <xsd:attribute name="choiceLength" type="dfdl:DFDLNonNegativeInteger" />
  </xsd:attributeGroup>

  <!--16 Arrays and Optional Elements: Properties for Repeating and Variable-Occurrence 
    Data Items -->
  <xsd:attribute name="occursCountKind" type="dfdl:OccursCountKindEnum" />
  <xsd:attribute name="occursCount" type="dfdl:DFDLExpression" />
  <xsd:attribute name="occursStopValue" type="dfdl:ListOfDFDLStringLiteral" />

  <xsd:attributeGroup name="OccursAG">
    <xsd:attribute name="occursCountKind" type="dfdl:OccursCountKindEnum" />
    <xsd:attribute name="occursCount" type="dfdl:DFDLExpression" />
    <xsd:attribute name="occursStopValue" type="dfdl:ListOfDFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 19 Calculated Value Properties. -->
  <xsd:attribute name="inputValueCalc" type="dfdl:DFDLExpression" />
  <xsd:attribute name="outputValueCalc" type="dfdl:DFDLExpression" />

  <xsd:attributeGroup name="CalculatedValueAG">
    <xsd:attribute name="inputValueCalc" type="dfdl:DFDLExpression" />
    <xsd:attribute name="outputValueCalc" type="dfdl:DFDLExpression" />
  </xsd:attributeGroup>

  <!-- document only markup properties -->
  <xsd:attribute name="documentFinalTerminatorCanBeMissing"
    type="dfdl:YesNoEnum" />

  <xsd:attributeGroup name="DocumentPropertiesAG">
    <xsd:attribute name="documentFinalTerminatorCanBeMissing"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>


  <!-- ========================================================== -->
  <!-- Enumeration of simple name of all DFDL properties that can -->
  <!-- appear in element form. -->
  <!-- ========================================================== -->

  <xsd:simpleType name="PropertyNameType">
    <xsd:restriction base="xsd:string">

      <!-- List of properties that are string types -->
      <xsd:enumeration value="initiator" />
      <xsd:enumeration value="terminator" />
      <xsd:enumeration value="documentFinalTerminatorCanBeMissing" />
      <xsd:enumeration value="outputNewLine" />
      <xsd:enumeration value="length" />
      <xsd:enumeration value="lengthPattern" />
      <xsd:enumeration value="textStringPadCharacter" />
      <xsd:enumeration value="textNumberPadCharacter" />
      <xsd:enumeration value="textCalendarPadCharacter" />
      <xsd:enumeration value="textBooleanPadCharacter" />
      <xsd:enumeration value="escapeCharacter" />
      <xsd:enumeration value="escapeBlockStart" />
      <xsd:enumeration value="escapeBlockEnd" />
      <xsd:enumeration value="escapeEscapeCharacter" />
      <xsd:enumeration value="extraEscapedCharacters" />
      <xsd:enumeration value="textNumberPattern" />
      <xsd:enumeration value="textStandardGroupingSeparator" />
      <xsd:enumeration value="textStandardDecimalSeparator" />
      <xsd:enumeration value="textStandardExponentRep" />
      <xsd:enumeration value="textStandardInfinityRep" />
      <xsd:enumeration value="textStandardNaNRep" />
      <xsd:enumeration value="textStandardZeroRep" />
      <xsd:enumeration value="textBooleanTrueRep" />
      <xsd:enumeration value="textBooleanFalseRep" />
      <xsd:enumeration value="calendarPattern" />
      <xsd:enumeration value="calendarLanguage" />
      <xsd:enumeration value="binaryCalendarEpoch" />
      <xsd:enumeration value="nilValue" />
      <xsd:enumeration value="separator" />
      <xsd:enumeration value="occursStopValue" />
      <xsd:enumeration value="inputValueCalc" />
      <xsd:enumeration value="outputValueCalc" />

      <!-- Bidirectional Properties for all Simple Types with Text representation -->
      <xsd:enumeration value="textBidi" />
      <xsd:enumeration value="textBidiTextOrdering" />
      <xsd:enumeration value="textBidiOrientation" />
      <xsd:enumeration value="textBidiSymmetric" />
      <xsd:enumeration value="textBidiTextShaped" />
      <xsd:enumeration value="textBidiNumeralShapes" />

      <!-- List of properties with non-string types -->
      <xsd:enumeration value="byteOrder" />
      <xsd:enumeration value="encoding" />
      <xsd:enumeration value="utf16Width" />
      <xsd:enumeration value="ignoreCase" />

      <xsd:enumeration value="alignment" />
      <xsd:enumeration value="alignmentUnits" />
      <xsd:enumeration value="fillByte" />
      <xsd:enumeration value="leadingSkip" />
      <xsd:enumeration value="trailingSkip" />

      <xsd:enumeration value="lengthKind" />
      <xsd:enumeration value="lengthUnits" />

      <xsd:enumeration value="prefixIncludesPrefixLength" />
      <xsd:enumeration value="prefixLengthType" />

      <xsd:enumeration value="representation" />

      <xsd:enumeration value="textPadKind" />
      <xsd:enumeration value="textTrimKind" />
      <xsd:enumeration value="textOutputMinLength" />

      <xsd:enumeration value="escapeKind" />
      <xsd:enumeration value="generateEscapeBlock" />

      <xsd:enumeration value="textStringJustification" />
      <xsd:enumeration value="textNumberRep" />
      <xsd:enumeration value="textNumberJustification" />

      <xsd:enumeration value="textNumberCheckPolicy" />
      <xsd:enumeration value="textStandardBase" />
      <xsd:enumeration value="textNumberRoundingMode" />
      <xsd:enumeration value="textNumberRounding" />
      <xsd:enumeration value="textNumberRoundingIncrement" />
      <xsd:enumeration value="textZonedSignStyle" />

      <xsd:enumeration value="binaryNumberRep" />
      <xsd:enumeration value="binaryDecimalVirtualPoint" />
      <xsd:enumeration value="binaryNumberCheckPolicy" />
      <xsd:enumeration value="binaryPackedSignCodes" />
      <xsd:enumeration value="binaryFloatRep" />

      <xsd:enumeration value="textBooleanJustification" />

      <xsd:enumeration value="binaryBooleanTrueRep" />
      <xsd:enumeration value="binaryBooleanFalseRep" />

      <xsd:enumeration value="textCalendarJustification" />

      <xsd:enumeration value="calendarPatternKind" />
      <xsd:enumeration value="calendarCheckPolicy" />
      <xsd:enumeration value="calendarTimeZone" />
      <xsd:enumeration value="calendarObserveDST" />
      <xsd:enumeration value="calendarFirstDayOfWeek" />
      <xsd:enumeration value="calendarDaysInFirstWeek" />
      <xsd:enumeration value="calendarCenturyStart" />
      <xsd:enumeration value="binaryCalendarRep" />

      <xsd:enumeration value="nilKind" />
      <xsd:enumeration value="nilValueDelimiterPolicy" />

      <xsd:enumeration value="useNilForDefault" />
      <xsd:enumeration value="emptyValueDelimiterPolicy" />

      <xsd:enumeration value="sequenceKind" />
      <xsd:enumeration value="hiddenGroupRef" />
      <xsd:enumeration value="initiatedContent" />

      <xsd:enumeration value="separatorPosition" />
      <xsd:enumeration value="separatorPolicy" />
      <xsd:enumeration value="separatorSuppressionPolicy" />      

      <xsd:enumeration value="choiceLengthKind" />
      <xsd:enumeration value="choiceLength" />

      <xsd:enumeration value="occursCountKind" />
      <xsd:enumeration value="occursCount" />

      <xsd:enumeration value="floating" />
      <xsd:enumeration value="truncateSpecifiedLengthString" />

      <xsd:enumeration value="decimalSigned" />
    </xsd:restriction>
  </xsd:simpleType>

  <!-- Qualified Form Attributes (for validating Short-form annotations) -->

  <xsd:attributeGroup name="BaseAGQualified">
    <xsd:attribute form="qualified" name="ref" type="xsd:QName" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="CommonAGQualified">
    <xsd:attribute form="qualified" name="byteOrder"
      type="dfdl:ByteOrderEnum_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="encoding"
      type="dfdl:EncodingEnum_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="utf16Width"
      type="dfdl:UTF16WidthEnum" />
    <xsd:attribute form="qualified" name="ignoreCase"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- 12.1 Aligned Data -->

  <xsd:attributeGroup name="AlignmentAGQualified">
    <xsd:attribute form="qualified" name="alignment"
      type="dfdl:AlignmentType" />
    <xsd:attribute form="qualified" name="alignmentUnits"
      type="dfdl:AlignmentUnitsEnum" />
    <xsd:attribute form="qualified" name="fillByte"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="leadingSkip"
      type="dfdl:DFDLNonNegativeInteger" />
    <xsd:attribute form="qualified" name="trailingSkip"
      type="dfdl:DFDLNonNegativeInteger" />
  </xsd:attributeGroup>

  <!-- 12.2 Delimiters and Text Mark up -->

  <xsd:attributeGroup name="MarkupAGQualified">
    <xsd:attribute form="qualified" name="initiator"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="terminator"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="outputNewLine"
      type="dfdl:DFDLStringLiteral" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="NonGroupMarkupAGQualified">
    <xsd:attribute form="qualified" name="emptyValueDelimiterPolicy"
      type="dfdl:EmptyValueDelimiterPolicyEnum" />
  </xsd:attributeGroup>

  <!-- 12.3 Length Properties -->

  <xsd:attributeGroup name="LengthAGQualified">
    <xsd:attribute form="qualified" name="lengthKind"
      type="dfdl:LengthKindEnum" />
    <xsd:attribute form="qualified" name="length"
      type="dfdl:DFDLNonNegativeInteger_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="lengthPattern"
      type="dfdl:DFDLRegularExpression" />
    <xsd:attribute form="qualified" name="lengthUnits"
      type="dfdl:LengthUnitsEnum" />
    <xsd:attribute form="qualified" name="prefixIncludesPrefixLength"
      type="dfdl:YesNoEnum" />
    <xsd:attribute form="qualified" name="prefixLengthType"
      type="xsd:QName" />
  </xsd:attributeGroup>

  <!-- 13 Simple Types -->

  <xsd:attributeGroup name="RepresentationAGQualified">
    <xsd:attribute form="qualified" name="representation"
      type="dfdl:RepresentationEnum" />
  </xsd:attributeGroup>

  <!-- 14.4 Simple or complex local element or element reference -->

  <xsd:attributeGroup name="FloatingAGQualified">
    <xsd:attribute form="qualified" name="floating" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!--13.2 Properties Common to All Simple Types with Text representation -->

  <xsd:attributeGroup name="SimpleTypesTextAGQualified">
    <xsd:attribute form="qualified" name="textPadKind"
      type="dfdl:TextPadKindEnum" />
    <xsd:attribute form="qualified" name="textTrimKind"
      type="dfdl:TextTrimKindEnum" />
    <xsd:attribute form="qualified" name="textOutputMinLength"
      type="dfdl:DFDLNonNegativeInteger" />
    <xsd:attribute form="qualified" name="escapeSchemeRef"
      type="dfdl:DFDLQName" />
  </xsd:attributeGroup>

  <!-- 13.2.1 Escape Scheme -->
  <!-- Note that these can never appear in short form -->
  <xsd:attributeGroup name="EscapeSchemeAGQualified">
    <xsd:attribute form="qualified" name="escapeKind"
      type="dfdl:EscapeKindEnum" />
    <xsd:attribute form="qualified" name="escapeCharacter"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="escapeBlockStart"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="escapeBlockEnd"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="escapeEscapeCharacter"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="extraEscapedCharacters"
      type="dfdl:ListOfDFDLStringLiteral" />
    <xsd:attribute form="qualified" name="generateEscapeBlock"
      type="dfdl:GenerateEscapeEnum" />
  </xsd:attributeGroup>

  <!-- 13.3 Properties for Bidirectional support for all Simple Types with 
    Text representation -->

  <xsd:attributeGroup name="TextBidiSchemeAGQualified">
    <xsd:attribute form="qualified" name="textBidi" type="dfdl:YesNoEnum" />
    <xsd:attribute form="qualified" name="textBidiTextOrdering"
      type="dfdl:TextBidiTextOrderingEnum" />
    <xsd:attribute form="qualified" name="textBidiOrientation"
      type="dfdl:TextBidiOrientationEnum" />
    <xsd:attribute form="qualified" name="textBidiSymmetric"
      type="dfdl:YesNoEnum" />
    <xsd:attribute form="qualified" name="textBidiTextShaped"
      type="dfdl:YesNoEnum" />
    <xsd:attribute form="qualified" name="textBidiNumeralShapes"
      type="dfdl:TextBidiNumeralShapesEnum" />
  </xsd:attributeGroup>

  <!-- 13.4 Properties Specific to Strings with Text representation -->

  <xsd:attributeGroup name="StringTextAGQualified">
    <xsd:attribute form="qualified" name="textStringJustification"
      type="dfdl:TextStringJustificationEnum" />
    <xsd:attribute form="qualified" name="textStringPadCharacter"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="truncateSpecifiedLengthString"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- Properties Specific to Number with Text or Binary representation -->

  <xsd:attributeGroup name="NumberAGQualified">
    <xsd:attribute form="qualified" name="decimalSigned"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- Properties Specific to Number with Text representation -->

  <xsd:attributeGroup name="NumberTextAGQualified">
    <xsd:attribute form="qualified" name="textNumberRep"
      type="dfdl:TextNumberRepEnum" />
    <xsd:attribute form="qualified" name="textNumberJustification"
      type="dfdl:TextNumberJustificationEnum" />
    <xsd:attribute form="qualified" name="textNumberPadCharacter"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="textStandardBase"
      type="dfdl:TextNumberBaseEnum" />
  </xsd:attributeGroup>

  <!-- Text number format attributes -->

  <xsd:attributeGroup name="TextNumberFormatAGQualified">
    <xsd:attribute form="qualified" name="textNumberPattern"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="textStandardGroupingSeparator"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="textStandardDecimalSeparator"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="textStandardExponentRep"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="textNumberCheckPolicy"
      type="dfdl:TextNumberCheckPolicyEnum" />
    <xsd:attribute form="qualified" name="textStandardInfinityRep"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="textStandardNaNRep"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="textNumberRoundingMode"
      type="dfdl:TextNumberRoundingModeEnum" />
    <xsd:attribute form="qualified" name="textNumberRounding"
      type="dfdl:TextNumberRoundingEnum" />
    <xsd:attribute form="qualified" name="textNumberRoundingIncrement"
      type="xsd:double" />
    <xsd:attribute form="qualified" name="textZonedSignStyle"
      type="dfdl:TextZonedSignStyleEnum" />
    <xsd:attribute form="qualified" name="textStandardZeroRep"
      type="dfdl:ListOfDFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 13.6 Properties Specific to Number with Binary representation -->

  <xsd:attributeGroup name="NumberBinaryAGQualified">
    <xsd:attribute form="qualified" name="binaryNumberRep"
      type="dfdl:BinaryNumberRepEnum" />
    <xsd:attribute form="qualified" name="binaryDecimalVirtualPoint"
      type="xsd:int" />
    <xsd:attribute form="qualified" name="binaryPackedSignCodes"
      type="dfdl:BinaryPackedSignCodes" />
    <xsd:attribute form="qualified" name="binaryNumberCheckPolicy"
      type="dfdl:BinaryNumberCheckPolicyEnum" />
  </xsd:attributeGroup>

  <!-- 13.7 Float/Double with Binary representation -->

  <xsd:attributeGroup name="FloatBinaryAGQualified">
    <xsd:attribute form="qualified" name="binaryFloatRep"
      type="dfdl:BinaryFloatRepEnum_Or_DFDLExpression" />
  </xsd:attributeGroup>

  <!-- 13.8 Properties Specific to Boolean with Text representation -->

  <xsd:attributeGroup name="BooleanTextAGQualified">
    <xsd:attribute form="qualified" name="textBooleanTrueRep"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="textBooleanFalseRep"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="textBooleanJustification"
      type="dfdl:TextBooleanJustificationEnum" />
    <xsd:attribute form="qualified" name="textBooleanPadCharacter"
      type="dfdl:DFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 13.9 Properties Specific to Boolean with Binary representation -->

  <xsd:attributeGroup name="BooleanBinaryAGQualified">
    <xsd:attribute form="qualified" name="binaryBooleanTrueRep"
      type="dfdl:DFDLNonNegativeInteger" />
    <xsd:attribute form="qualified" name="binaryBooleanFalseRep"
      type="dfdl:DFDLNonNegativeInteger" />
  </xsd:attributeGroup>

  <!-- 13.10 Properties Specific to Calendar Format -->

  <xsd:attributeGroup name="CalendarFormatAGQualified">
    <xsd:attribute form="qualified" name="calendarPattern"
      type="dfdl:DFDLStringLiteral" />
    <xsd:attribute form="qualified" name="calendarPatternKind"
      type="dfdl:CalendarPatternKindEnum" />
    <xsd:attribute form="qualified" name="calendarCheckPolicy"
      type="dfdl:CalendarCheckPolicyEnum" />
    <xsd:attribute form="qualified" name="calendarTimeZone"
      type="dfdl:CalendarTimeZoneType" />
    <xsd:attribute form="qualified" name="calendarObserveDST"
      type="dfdl:YesNoEnum" />
    <xsd:attribute form="qualified" name="calendarFirstDayOfWeek"
      type="dfdl:CalendarFirstDayOfWeekEnum" />
    <xsd:attribute form="qualified" name="calendarDaysInFirstWeek"
      type="dfdl:CalendarDaysInFirstWeek" />
    <xsd:attribute form="qualified" name="calendarCenturyStart"
      type="dfdl:CalendarCenturyStart" />
    <xsd:attribute form="qualified" name="calendarLanguage"
      type="dfdl:CalendarLanguageType" />
  </xsd:attributeGroup>

  <!-- 13.11 Properties Specific to Calendar with Text Representation -->

  <xsd:attributeGroup name="CalendarTextAGQualified">
    <xsd:attribute form="qualified" name="textCalendarJustification"
      type="dfdl:TextCalendarJustificationEnum" />
    <xsd:attribute form="qualified" name="textCalendarPadCharacter"
      type="dfdl:DFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 13.12 Properties Specific to Calendar with Binary Representation -->

  <xsd:attributeGroup name="CalendarBinaryAGQualified">
    <xsd:attribute form="qualified" name="binaryCalendarRep"
      type="dfdl:BinaryCalendarRepEnum" />
    <xsd:attribute form="qualified" name="binaryCalendarEpoch"
      type="xsd:string" />
  </xsd:attributeGroup>

  <!-- 13.13 Properties Specific to Opaque Types (hexBinary) -->
  <xsd:attributeGroup name="OpaqueAGQualified">
  </xsd:attributeGroup>

  <!-- 13.14 Properties for Nillable Elements -->

  <xsd:attributeGroup name="NillableAGQualified">
    <xsd:attribute form="qualified" name="nilKind"
      type="dfdl:NilKindEnum" />
    <xsd:attribute form="qualified" name="nilValue"
      type="dfdl:ListOfDFDLStringLiteral" />
    <xsd:attribute form="qualified" name="nilValueDelimiterPolicy"
      type="dfdl:NilValueDelimiterPolicyEnum" />
  </xsd:attributeGroup>

  <!-- 13.15 Properties for Default Value Control -->

  <xsd:attributeGroup name="DefaultValueControlAGQualified">
    <xsd:attribute form="qualified" name="useNilForDefault"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- 14 Sequence Groups -->

  <xsd:attributeGroup name="SequenceAGQualified">
    <xsd:attribute form="qualified" name="sequenceKind"
      type="dfdl:SequenceKindEnum" />
    <xsd:attribute form="qualified" name="hiddenGroupRef"
      type="xsd:QName" />
  </xsd:attributeGroup>

  <!-- 14.2 Sequence Groups with Delimiters -->

  <xsd:attributeGroup name="SeparatorAGQualified">
    <xsd:attribute form="qualified" name="separator"
      type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression" />
    <xsd:attribute form="qualified" name="separatorPosition"
      type="dfdl:SeparatorPositionEnum" />
    <xsd:attribute form="qualified" name="separatorPolicy"
      type="dfdl:SeparatorPolicyEnum" />
    <xsd:attribute form="qualified" name="separatorSuppressionPolicy"
      type="dfdl:SeparatorSuppressionPolicyEnum" />      
  </xsd:attributeGroup>

  <xsd:attributeGroup name="GroupCommonAGQualified">
    <xsd:attribute form="qualified" name="initiatedContent"
      type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <!-- 15 Choices -->

  <xsd:attributeGroup name="ChoiceAGQualified">
    <xsd:attribute form="qualified" name="choiceLengthKind"
      type="dfdl:ChoiceLengthKindEnum" />
    <xsd:attribute form="qualified" name="choiceLength"
      type="dfdl:DFDLNonNegativeInteger" />
  </xsd:attributeGroup>

  <!--16 Arrays and Optional Elements: Properties for Repeating and Variable-Occurrence 
    Data Items -->

  <xsd:attributeGroup name="OccursAGQualified">
    <xsd:attribute form="qualified" name="occursCountKind"
      type="dfdl:OccursCountKindEnum" />
    <xsd:attribute form="qualified" name="occursCount"
      type="dfdl:DFDLExpression" />
    <xsd:attribute form="qualified" name="occursStopValue"
      type="dfdl:ListOfDFDLStringLiteral" />
  </xsd:attributeGroup>

  <!-- 19 Calculated Value Properties. -->

  <xsd:attributeGroup name="CalculatedValueAGQualified">
    <xsd:attribute form="qualified" name="inputValueCalc"
      type="dfdl:DFDLExpression" />
    <xsd:attribute form="qualified" name="outputValueCalc"
      type="dfdl:DFDLExpression" />
  </xsd:attributeGroup>

  <!-- document only markup properties -->

  <xsd:attributeGroup name="DocumentPropertiesAGQualified">
    <xsd:attribute form="qualified"
      name="documentFinalTerminatorCanBeMissing" type="dfdl:YesNoEnum" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="ElementAGQualified">
    <xsd:attributeGroup ref="dfdl:SimpleTypeAGQualified" />
    <xsd:attributeGroup ref="dfdl:FloatingAGQualified" />
    <xsd:attributeGroup ref="dfdl:NillableAGQualified" />
    <xsd:attributeGroup ref="dfdl:DefaultValueControlAGQualified" />
    <xsd:attributeGroup ref="dfdl:OccursAGQualified" />
    <xsd:attributeGroup ref="dfdl:CalculatedValueAGQualified" />
  </xsd:attributeGroup>

  <!-- dfdl:group takes the union of dfdl:sequence and dfdl:choice properties -->
  <xsd:attributeGroup name="GroupAGQualified">
    <xsd:attributeGroup ref="dfdl:GroupCommonAGQualified" />
    <xsd:attributeGroup ref="dfdl:SequenceAGQualified" />
    <xsd:attributeGroup ref="dfdl:ChoiceAGQualified" />
    <xsd:attributeGroup ref="dfdl:SeparatorAGQualified" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="SimpleTypeAGQualified">
    <xsd:attributeGroup ref="dfdl:RepresentationAGQualified" />
    <xsd:attributeGroup ref="dfdl:NonGroupMarkupAGQualified" />
    <xsd:attributeGroup ref="dfdl:LengthAGQualified" />
    <xsd:attributeGroup ref="dfdl:SimpleTypesTextAGQualified" />
    <xsd:attributeGroup ref="dfdl:StringTextAGQualified" />
    <xsd:attributeGroup ref="dfdl:NumberAGQualified" />
    <xsd:attributeGroup ref="dfdl:NumberTextAGQualified" />
    <xsd:attributeGroup ref="dfdl:TextNumberFormatAGQualified" />
    <xsd:attributeGroup ref="dfdl:NumberBinaryAGQualified" />
    <xsd:attributeGroup ref="dfdl:FloatBinaryAGQualified" />
    <xsd:attributeGroup ref="dfdl:TextBidiSchemeAGQualified" />
    <xsd:attributeGroup ref="dfdl:CalendarTextAGQualified" />
    <xsd:attributeGroup ref="dfdl:CalendarBinaryAGQualified" />
    <xsd:attributeGroup ref="dfdl:CalendarFormatAGQualified" />
    <xsd:attributeGroup ref="dfdl:BooleanTextAGQualified" />
    <xsd:attributeGroup ref="dfdl:BooleanBinaryAGQualified" />
  </xsd:attributeGroup>



  <!-- ======================================================== -->
  <!-- DFDL Format definition types -->
  <!-- ======================================================== -->

  <!-- 7.2 dfdl:defineFormat -->
  <xsd:element name="defineFormat" type="dfdl:DFDLDefineFormat" />
  <xsd:complexType name="DFDLDefineFormat">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0"
        ref="dfdl:format" />
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:NCName" use='required'/>
    <xsd:attributeGroup ref="dafint:daffodilAG"/>
  </xsd:complexType>

  <xsd:element name="format" type="dfdl:DFDLFormat" />
  <xsd:complexType name="DFDLFormat">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLBaseType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:FormatAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- 7.5 dfdl:defineEscapeScheme -->
  <xsd:element name="defineEscapeScheme" type="dfdl:DFDLDefineEscapeScheme" />

  <xsd:complexType name="DFDLDefineEscapeScheme">
    <xsd:sequence>
      <xsd:element ref="dfdl:escapeScheme" />
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:NCName" use='required'/>
    <xsd:attributeGroup ref="dafint:daffodilAG"/>
  </xsd:complexType>

  <xsd:element name="escapeScheme" type="dfdl:DFDLEscapeScheme" />

  <xsd:complexType name="DFDLEscapeScheme">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:EscapeSchemeAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ================================================================= -->
  <!-- Element form for properties -->
  <!-- ================================================================= -->

  <xsd:element name="property" type="dfdl:PropertyType" />

  <xsd:complexType name="PropertyType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="name" type="dfdl:PropertyNameType" use='required'/>
        <xsd:attributeGroup ref="dafint:daffodilAG"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <!-- ================================================================= -->
  <!-- Elements, types and attribute groups to specify DFDL Variables -->
  <!-- ================================================================= -->

  <xsd:complexType name="DFDLVariableType">
    <xsd:simpleContent>
      <xsd:extension base="dfdl:DFDLStringLiteral_Or_DFDLExpression">
        <xsd:attributeGroup ref="dafint:daffodilAG"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:attributeGroup name="DefineVariableAG">
    <xsd:attribute name="name" type="xsd:NCName" use='required'/>
    <xsd:attribute name="predefined" type="xsd:boolean" />
    <xsd:attribute name="type" type="xsd:QName" />
    <xsd:attribute name="external" type="xsd:boolean" />
    <xsd:attribute name="defaultValue"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="SetVariableAG">
    <xsd:attribute name="ref" type="xsd:QName" use='required'/>
    <xsd:attribute name="value"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="NewVariableInstanceAG">
    <xsd:attribute name="ref" type="xsd:QName" use='required'/>
    <xsd:attribute name="defaultValue"
      type="dfdl:DFDLStringLiteral_Or_DFDLExpression" />
  </xsd:attributeGroup>

  <xsd:element name="defineVariable">
    <xsd:complexType>
      <xsd:simpleContent>
        <xsd:extension base="dfdl:DFDLVariableType">
          <xsd:attributeGroup ref="dfdl:DefineVariableAG" />
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="newVariableInstance">
    <xsd:complexType>
      <xsd:simpleContent>
        <xsd:extension base="dfdl:DFDLVariableType">
          <xsd:attributeGroup ref="dfdl:NewVariableInstanceAG" />
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="setVariable">
    <xsd:complexType>
      <xsd:simpleContent>
        <xsd:extension base="dfdl:DFDLVariableType">
          <xsd:attributeGroup ref="dfdl:SetVariableAG" />
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>
  </xsd:element>

  <!-- ================================================================================ -->
  <!-- Elements, types and attribute groups to specify DFDL Assert and Discriminator -->
  <!-- ================================================================================ -->

  <!-- The type that models element value as DFDL expression -->
  <xsd:attributeGroup name="TestConditionAG">
    <xsd:attribute name="test" type="dfdl:DFDLExpression" />
    <xsd:attribute name="testKind" type="dfdl:TestKindEnum" />
    <xsd:attribute name="testPattern" type="dfdl:DFDLRegularExpression" />
    <xsd:attribute name="message" type="xsd:string" />
  </xsd:attributeGroup>

  <xsd:complexType name="TestCondition">
    <xsd:simpleContent>
      <xsd:extension base="dfdl:DFDLExpressionOrPatternOrNothing"> <!-- changed to accept regex -->
        <xsd:attributeGroup ref="dfdl:TestConditionAG" />
        <xsd:attributeGroup ref="dafint:daffodilAG" />
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:element name="assert">
    <xsd:complexType>
      <xsd:simpleContent>
        <xsd:extension base="dfdl:TestCondition">
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="discriminator">
    <xsd:complexType>
      <xsd:simpleContent>
        <xsd:extension base="dfdl:TestCondition">
        </xsd:extension>
      </xsd:simpleContent>
    </xsd:complexType>
  </xsd:element>

  <!-- ============================================================ -->
  <!-- Specialized annotations element definitions -->
  <!-- ============================================================ -->

  <xsd:element name="element" type="dfdl:DFDLElementType" />
  <xsd:element name="sequence" type="dfdl:DFDLSequenceType" />
  <xsd:element name="choice" type="dfdl:DFDLChoiceType" />
  <xsd:element name="group" type="dfdl:DFDLGroupType" />
  <xsd:element name="simpleType" type="dfdl:DFDLSimpleType" />

  <!-- ============================================================= -->
  <!-- Specialized annotations types -->
  <!-- ============================================================= -->

  <xsd:complexType abstract="true" name="DFDLType">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0"
        ref="dfdl:property" />
    </xsd:sequence>
    <xsd:attributeGroup ref="dafint:daffodilAG"/> 
  </xsd:complexType>

  <xsd:complexType abstract="true" name="DFDLBaseType">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:BaseAG" />
        <xsd:attributeGroup ref="dfdl:CommonAG" />
        <xsd:attributeGroup ref="dfdl:AlignmentAG" />
        <xsd:attributeGroup ref="dfdl:MarkupAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DFDLElementType">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLBaseType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:ElementAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DFDLSequenceType">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLBaseType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:GroupCommonAG" />
        <xsd:attributeGroup ref="dfdl:SequenceAG" />
        <xsd:attributeGroup ref="dfdl:SeparatorAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DFDLChoiceType">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLBaseType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:GroupCommonAG" />
        <xsd:attributeGroup ref="dfdl:ChoiceAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DFDLSimpleType">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLBaseType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:SimpleTypeAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DFDLGroupType">
    <xsd:complexContent>
      <xsd:extension base="dfdl:DFDLBaseType">
        <xsd:sequence />
        <xsd:attributeGroup ref="dfdl:GroupAG" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ======================================================== -->
  <!-- Specialized annotations attribute groups -->
  <!-- ======================================================== -->

  <xsd:attributeGroup name="FormatAG">
    <xsd:attributeGroup ref="dfdl:ElementAG" />
    <xsd:attributeGroup ref="dfdl:GroupAG" />
    <xsd:attributeGroup ref="dfdl:DocumentPropertiesAG" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="ElementAG">
    <xsd:attributeGroup ref="dfdl:SimpleTypeAG" />
    <xsd:attributeGroup ref="dfdl:FloatingAG" />
    <xsd:attributeGroup ref="dfdl:NillableAG" />
    <xsd:attributeGroup ref="dfdl:DefaultValueControlAG" />
    <xsd:attributeGroup ref="dfdl:OccursAG" />
    <xsd:attributeGroup ref="dfdl:CalculatedValueAG" />
  </xsd:attributeGroup>

  <!-- dfdl:group takes the union of dfdl:sequence and dfdl:choice properties -->
  <xsd:attributeGroup name="GroupAG">
    <xsd:attributeGroup ref="dfdl:GroupCommonAG" />
    <xsd:attributeGroup ref="dfdl:SequenceAG" />
    <xsd:attributeGroup ref="dfdl:ChoiceAG" />
    <xsd:attributeGroup ref="dfdl:SeparatorAG" />
  </xsd:attributeGroup>

  <xsd:attributeGroup name="SimpleTypeAG">
    <xsd:attributeGroup ref="dfdl:RepresentationAG" />
    <xsd:attributeGroup ref="dfdl:NonGroupMarkupAG" />
    <xsd:attributeGroup ref="dfdl:LengthAG" />
    <xsd:attributeGroup ref="dfdl:SimpleTypesTextAG" />
    <xsd:attributeGroup ref="dfdl:StringTextAG" />
    <xsd:attributeGroup ref="dfdl:NumberAG" />
    <xsd:attributeGroup ref="dfdl:NumberTextAG" />
    <xsd:attributeGroup ref="dfdl:TextNumberFormatAG" />
    <xsd:attributeGroup ref="dfdl:NumberBinaryAG" />
    <xsd:attributeGroup ref="dfdl:FloatBinaryAG" />
    <xsd:attributeGroup ref="dfdl:TextBidiSchemeAG" />
    <xsd:attributeGroup ref="dfdl:CalendarTextAG" />
    <xsd:attributeGroup ref="dfdl:CalendarBinaryAG" />
    <xsd:attributeGroup ref="dfdl:CalendarFormatAG" />
    <xsd:attributeGroup ref="dfdl:BooleanTextAG" />
    <xsd:attributeGroup ref="dfdl:BooleanBinaryAG" />
  </xsd:attributeGroup>

</xsd:schema>
