<?xml version="1.0" encoding="UTF-8"?>
<tdml:testSuite suiteName="expressions"
	description="lengthKind explicit and occursCountKind expression"
	xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset" xmlns:ex="http://example.com"
	xmlns="http://example.com" xsi:schemaLocation="http://www.ibm.com/xmlns/dfdl/testData /xsd/tdml.xsd">

	<tdml:defineSchema name="lke1_rel">
		<dfdl:format ref="ex:daffodilTest1" />

		<xs:element name="e1">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="len" type="xs:int"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="s1" type="xs:string" dfdl:lengthKind="explicit"
						dfdl:length="{ ../ex:len }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="lke1_rel" root="e1"
		model="lke1_rel" description="simplest computed length - DFDL-23-011R">

		<tdml:document>
			<tdml:documentPart type="byte">00000004
			</tdml:documentPart>
			<tdml:documentPart type="text">abcd</tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<ex:e1>
					<ex:len>4</ex:len>
					<ex:s1>abcd</ex:s1>
				</ex:e1>
			</tdml:dfdlInfoset>
		</tdml:infoset>

	</tdml:parserTestCase>

	<tdml:defineSchema name="lke1_abs">
		<dfdl:format ref="ex:daffodilTest1" />

		<xs:element name="e1">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="len" type="xs:int"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="s1" type="xs:string" dfdl:lengthKind="explicit"
						dfdl:length="{ /ex:e1/ex:len }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>


	<tdml:parserTestCase name="lke1_abs" root="e1"
		model="lke1_abs" description="simplest computed length - DFDL-23-011R">

		<tdml:document>
			<tdml:documentPart type="byte">00000004
			</tdml:documentPart>
			<tdml:documentPart type="text">abcd</tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<ex:e1>
					<ex:len>4</ex:len>
					<ex:s1>abcd</ex:s1>
				</ex:e1>
			</tdml:dfdlInfoset>
		</tdml:infoset>

	</tdml:parserTestCase>

	<tdml:defineSchema name="ocke1">
		<dfdl:format ref="ex:daffodilTest1" />

		<xs:element name="e1">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="reps" type="xs:int"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="scale" type="xs:int"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="s1" type="xs:string" dfdl:lengthKind="explicit"
						dfdl:length="{1}" dfdl:occursCount="{ ../ex:reps * /ex:e1/ex:scale}"
						dfdl:occursCountKind="expression" minOccurs="0" maxOccurs="unbounded" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="ocke1" root="e1" model="ocke1"
		description="very simple occursCountKind expression - DFDL-23-011R">

		<tdml:document>
			<!-- two binary integers get multiplied 2x2=4 -->
			<tdml:documentPart type="byte">00000002 00000002
			</tdml:documentPart>
			<!-- followed by that many characters, each is an element of the array -->
			<tdml:documentPart type="text">abcd</tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<ex:e1>
					<ex:reps>2</ex:reps>
					<ex:scale>2</ex:scale>
					<ex:s1>a</ex:s1>
					<ex:s1>b</ex:s1>
					<ex:s1>c</ex:s1>
					<ex:s1>d</ex:s1>
				</ex:e1>
			</tdml:dfdlInfoset>
		</tdml:infoset>

	</tdml:parserTestCase>

	<tdml:defineSchema name="ocke2">
		<dfdl:format ref="ex:daffodilTest1" />

		<xs:element name="e1">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="scale" type="xs:int"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="hdr">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="reps" type="xs:int"
									dfdl:representation="binary" dfdl:lengthKind="implicit" />
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="body">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="s1" type="xs:string"
									dfdl:lengthKind="explicit" dfdl:length="{1}"
									dfdl:occursCount="{ ../../ex:hdr/ex:reps * /ex:e1/ex:scale}"
									dfdl:occursCountKind="expression" minOccurs="0" maxOccurs="unbounded" />
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="ocke2" root="e1" model="ocke2"
		description="very simple occursCountKind expression - DFDL-23-011R">

		<tdml:document>
			<!-- two binary integers get multiplied 2x2=4 -->
			<tdml:documentPart type="byte">00000003 00000002
			</tdml:documentPart>
			<!-- followed by that many characters, each is an element of the array -->
			<tdml:documentPart type="text">abcdef</tdml:documentPart>
		</tdml:document>

		<tdml:infoset>
			<tdml:dfdlInfoset>
				<ex:e1>
					<ex:scale>3</ex:scale>
					<ex:hdr>
						<ex:reps>2</ex:reps>
					</ex:hdr>
					<ex:body>
						<ex:s1>a</ex:s1>
						<ex:s1>b</ex:s1>
						<ex:s1>c</ex:s1>
						<ex:s1>d</ex:s1>
						<ex:s1>e</ex:s1>
						<ex:s1>f</ex:s1>
					</ex:body>
				</ex:e1>
			</tdml:dfdlInfoset>
		</tdml:infoset>

	</tdml:parserTestCase>

	<tdml:defineSchema name="ArrayOptionalElem-Embedded.dfdl.xsd">

		<dfdl:format lengthKind="delimited" lengthUnits="bytes"
			encoding="UTF-8" separator="" initiator="" terminator=""
			occursCountKind="parsed" ignoreCase="no" textNumberRep="standard"
			representation="text" byteOrder="bigEndian" binaryNumberRep="binary" />

		<xs:element name="aoe_01">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="reps" type="xs:unsignedInt"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="rows" type="xs:byte"
						dfdl:representation="binary" maxOccurs="unbounded"
						dfdl:occursCountKind="expression" dfdl:occursCount="{ ../ex:reps }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="ArrayOptElem_01" root="aoe_01"
		model="ArrayOptionalElem-Embedded.dfdl.xsd" description="Section 16 Array and Optional Elements">

		<tdml:document>
			<tdml:documentPart type="byte">00000003000102
			</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<aoe_01>
					<reps>3</reps>
					<rows>0</rows>
					<rows>1</rows>
					<rows>2</rows>
				</aoe_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:defineSchema name="expressions-Embedded.dfdl.xsd">

		<dfdl:format lengthKind="delimited" lengthUnits="bytes"
			encoding="UTF-8" separator="" initiator="" terminator=""
			occursCountKind="parsed" ignoreCase="no" textNumberRep="standard"
			representation="text" />

		<xs:element name="lke_01" dfdl:lengthKind="implicit">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="e1" type="xs:int" dfdl:lengthKind="explicit"
						dfdl:length="1" />
					<xs:element name="e2" type="xs:int" dfdl:lengthKind="explicit"
						dfdl:length="{../ex:e1}" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="lke2_rel" root="lke_01"
		model="expressions-Embedded.dfdl.xsd" description="">

		<tdml:document>3538</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset>
				<lke_01>
					<e1>3</e1>
					<e2>538</e2>
				</lke_01>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:defineSchema name="expression-type-errors.dfdl.xsd">

		<dfdl:format lengthKind="delimited" lengthUnits="bytes"
			encoding="UTF-8" separator="" initiator="" terminator=""
			occursCountKind="parsed" ignoreCase="no" textNumberRep="standard"
			representation="text" />

		<xs:element name="e" dfdl:lengthKind="implicit">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="e1" type="xs:string"
						dfdl:inputValueCalc="{ 'S' }" />
					<xs:element name="e2" type="xs:int" dfdl:inputValueCalc="{ 2 }" />
					<xs:element name="e3" type="xs:int" dfdl:inputValueCalc="{ ../ex:e2 + ../ex:e1 }" /> <!-- type error adding string to int is n.g. -->
				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="f" dfdl:lengthKind="implicit">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="e3" type="xs:int" dfdl:inputValueCalc="{ 2.5 }" /> <!-- type error as result is not int. -->
				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="g" dfdl:lengthKind="implicit">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="e1" type="xs:string"
						dfdl:inputValueCalc="{ 'notAnInt' }" />
					<xs:element name="e3" type="xs:int" dfdl:inputValueCalc="{ ../ex:e1 }" /> <!-- type error -->
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

	<tdml:parserTestCase name="expression-type-error1"
		root="e" model="expression-type-errors.dfdl.xsd" description="get a type error from an expression at runtime.">

		<tdml:document />
		<tdml:errors>
			<tdml:error>Parse Error</tdml:error>
			<tdml:error>convert</tdml:error>
			<tdml:error>double</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="expression-type-error2"
		root="f" model="expression-type-errors.dfdl.xsd" description="get a type error from an expression at runtime.">
		<tdml:document />
		<tdml:errors>
			<tdml:error>Schema Definition Error</tdml:error>
			<tdml:error>convert</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="expression-type-error3"
		root="g" model="expression-type-errors.dfdl.xsd" description="get a type error from an expression at runtime.">
		<tdml:document />
		<tdml:errors>
			<tdml:error>Parse Error</tdml:error>
			<tdml:error>NaN</tdml:error>
		</tdml:errors>
		<!-- <tdml:infoset> <tdml:dfdlInfoset xmlns="http://example.com"> <g> <e1>notAnInt</e1> 
			<e3>2</e3> </g> </tdml:dfdlInfoset> </tdml:infoset> -->
	</tdml:parserTestCase>

	<tdml:defineSchema name="unknown-prefix">
		<dfdl:format ref="ex:daffodilTest1" />
		<xs:element name="theElementName" type="xs:int"
			dfdl:inputValueCalc="{ theUnknownPrefix:x }" />
	</tdml:defineSchema>
	
	<tdml:parserTestCase name="expression-unknown-prefix"
		root="theElementName" model="unknown-prefix"
		description="get compilation time error due to unknown prefix.">
		<tdml:document />
		<tdml:errors>
			<tdml:error>Schema Definition</tdml:error>
			<tdml:error>theUnknownPrefix</tdml:error>
			<tdml:error>theElementName</tdml:error>
		</tdml:errors>
	</tdml:parserTestCase>


</tdml:testSuite>