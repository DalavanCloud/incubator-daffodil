<?xml version="1.0" encoding="UTF-8"?>
<tdml:testSuite suiteName="SimpleTypes" description="Section 5 - simple types"
	xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ex="http://example.com">

	<tdml:defineSchema name="Functions.dfdl.xsd">
		<dfdl:format ref="ex:daffodilTest1" initiator=""
			separator="," terminator="" leadingSkip="0" trailingSkip="0"
			textBidi="no" floating="no" encoding="utf-8" byteOrder="bigEndian"
			alignment="1" alignmentUnits="bytes" fillByte="f" occursCountKind="implicit"
			truncateSpecifiedLengthString="no" ignoreCase="no" representation="text"
			lengthKind="delimited" nilValueDelimiterPolicy="both"
			emptyValueDelimiterPolicy="none" documentFinalTerminatorCanBeMissing="yes"
			initiatedContent="no" separatorSuppressionPolicy="never" separatorPosition="infix" />

		<xs:element name="testBit">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="byte" type="xs:byte"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="bit0" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:testBit( ../ex:byte/text(), 0) }" />
					<xs:element name="bit7" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:testBit( ../ex:byte/text(), 7) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
		
    <xs:element name="testBit1">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="byte" type="xs:byte"
						dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="bit1" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:testBit( ../ex:byte/text(), 1) }" />
					<xs:element name="bit2" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:testBit( ../ex:byte/text(), 2) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
    
    <xs:element name="testBit2">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="int" type="xs:unsignedInt" dfdl:representation="binary" dfdl:lengthKind="implicit" />
					<xs:element name="bit1" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:testBit( ../ex:byte/text(), 1) }" />
					<xs:element name="bit2" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:testBit( ../ex:byte/text(), 2) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="setBits">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="e" type="xs:byte" dfdl:lengthKind="implicit"
						dfdl:representation="binary" />
					<xs:element name="e0" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(1, 0, 0, 0, 0, 0 , 0, 0) }" />
					<xs:element name="e1" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 1, 0, 0, 0, 0 , 0, 0) }" />
					<xs:element name="e2" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 1, 0, 0, 0 , 0, 0) }" />
					<xs:element name="e3" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 0, 1, 0, 0 , 0, 0) }" />
					<xs:element name="e4" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 0, 0, 1, 0 , 0, 0) }" />
					<xs:element name="e5" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 0, 0, 0, 1 , 0, 0) }" />
					<xs:element name="e6" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 0, 0, 0, 0 , 1, 0) }" />
					<xs:element name="e7" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 0, 0, 0, 0 , 0, 1) }" />
					<xs:element name="e8" type="xs:unsignedByte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(1, 1, 1, 1, 1, 1 , 1, 1) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
		
    <xs:element name="setBits1" type="xs:byte" dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:setBits(0, 0, 1, 0 , 0, 0) }" />
		
    <xs:element name="setBits2">
			<xs:complexType>
				<xs:sequence dfdl:separator=",">
					<xs:element name="e0" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e1" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e2" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e3" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e4" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e5" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e6" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e7" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="1" dfdl:representation="text" />
					<xs:element name="e" type="xs:byte" dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:setBits(/ex:setBits2/ex:e7, /ex:setBits2/ex:e6, /ex:setBits2/ex:e5, /ex:setBits2/ex:e4, /ex:setBits2/ex:e3, /ex:setBits2/ex:e2, /ex:setBits2/ex:e1, /ex:setBits2/ex:e0) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="occursCount">
			<xs:annotation>
				<xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
					<dfdl:assert test="{ dfdl:occursCount( /ex:occursCount/* ) eq 3 }"
						message="Assertion 
            failed for dfdl:occursCount( /ex:occursCount/* ) eq 3" />
				</xs:appinfo>
			</xs:annotation>
			<xs:complexType>
				<xs:sequence>
					<xs:element name="i1" type="xs:int" />
					<xs:element name="i2" type="xs:int" />
					<xs:element name="i3" type="xs:int" />
					<!-- <xs:element name="occurs" type="xs:int" dfdl:inputValueCalc="{ 
						dfdl:occursCount( /ex:occursCount/* ) }" /> -->
				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="stringLiteralFromString">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="str" type="xs:string"
						dfdl:representation="text" />
					<xs:element name="literal" type="xs:string"
						dfdl:lengthKind="implicit"
						dfdl:inputValueCalc="{ dfdl:stringLiteralFromString( ../ex:str/text()) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

		<xs:element name="containsEntity">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="str" type="xs:string"
						dfdl:representation="text" />
					<xs:element name="hasEntity" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:containsEntity('TEST%NL;TEST') }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
		
    <xs:element name="containsEntity1">
			<xs:complexType>
				<xs:sequence>
					<xs:element name="str" type="xs:string"	dfdl:representation="text" />
					<xs:element name="hasEntity" type="xs:boolean"
						dfdl:lengthKind="implicit" dfdl:inputValueCalc="{ dfdl:containsEntity(xs:string(/ex:containsEntity1/ex:str)) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
		
    <xs:element name="valueLength">
			<xs:complexType>
				<xs:sequence dfdl:separator=",">
					<xs:element name="str" type="xs:string"	dfdl:lengthKind="delimited" dfdl:textTrimKind="padChar" 
            dfdl:textStringPadCharacter="/" dfdl:textStringJustification="center" />
					<xs:element name="valLen" type="xs:string"
						dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ dfdl:valueLength( ../ex:str/text(), 0) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
    
    <xs:element name="valueLength2">
			<xs:complexType>
				<xs:sequence dfdl:separator=",">
					<xs:element name="str" type="xs:string"	dfdl:lengthKind="delimited" dfdl:textTrimKind="padChar" 
            dfdl:textStringPadCharacter="/" dfdl:textStringJustification="center" />
					<xs:element name="valLen" type="xs:string"
						dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ dfdl:valueLength( ../ex:str, 'bytes' ) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
    
    <xs:element name="contentLength">
			<xs:complexType>
				<xs:sequence dfdl:separator=",">
					<xs:element name="str" type="xs:string"	dfdl:lengthKind="delimited" dfdl:textTrimKind="padChar" 
            dfdl:textStringPadCharacter="/" dfdl:textStringJustification="center" />
					<xs:element name="conLen" dfdl:representation="binary" dfdl:lengthKind="implicit" type="xs:unsignedLong"
						dfdl:inputValueCalc="{ dfdl:contentLength( ../ex:str, 'bytes' ) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>
    
    <xs:element name="contentLength2">
			<xs:complexType>
				<xs:sequence dfdl:separator=",">
					<xs:element name="str" type="xs:string"	dfdl:lengthKind="delimited" dfdl:textTrimKind="padChar" 
            dfdl:textStringPadCharacter="/" dfdl:textStringJustification="center" />
					<xs:element name="conLen" dfdl:lengthKind="delimited" type="xs:string" dfdl:inputValueCalc="{ dfdl:contentLength( ../ex:str, 'characters' ) }" />
				</xs:sequence>
			</xs:complexType>
		</xs:element>

	</tdml:defineSchema>

<!--
    Test Name: testBit_0
       Schema: Functions.dfdl.xsd
         Root: testBit
      Purpose: This test demonstrates the use of the testBit function to turn bits into boolean values
-->

	<tdml:parserTestCase name="testBit_0" root="testBit"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:testBit - DFDL-23-130R">

		<tdml:document>
			<tdml:documentPart type="bits">00000001
			</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<testBit>
					<byte>1</byte>
					<bit0>true</bit0>
					<bit7>false</bit7>
				</testBit>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: testBit_1
       Schema: Functions.dfdl.xsd
         Root: testBit1
      Purpose: This test demonstrates the use of the testBit function to turn bits into boolean values
-->

	<tdml:parserTestCase name="testBit_1" root="testBit1"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:testBit - DFDL-23-130R">

		<tdml:document>
			<tdml:documentPart type="bits">00000111</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<testBit1>
					<byte>7</byte>
					<bit1>true</bit1>
					<bit2>true</bit2>
				</testBit1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: testBit_2
       Schema: Functions.dfdl.xsd
         Root: testBit2
      Purpose: This test demonstrates the use of the testBit function to turn bits into boolean values
-->

	<tdml:parserTestCase name="testBit_2" root="testBit2"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:testBit - DFDL-23-130R">

		<tdml:document>
			<tdml:documentPart type="bits">00000000 00000000 00000101 00010101</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<testBit1>
					<byte>1301</byte>
					<bit1>false</bit1>
					<bit2>true</bit2>
				</testBit1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
  </tdml:parserTestCase>

<!--
    Test Name: testBit_3
       Schema: Functions.dfdl.xsd
         Root: testBit3
      Purpose: This test demonstrates the creation of a runtime SDE by feeding an unexpected data type
-->

	<tdml:parserTestCase name="testBit_3" root="testBit"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:testBit - DFDL-23-130R">

		<tdml:document>
			<tdml:documentPart type="bits">foobar</tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>placeholder</tdml:error>
    </tdml:errors>
	</tdml:parserTestCase>


<!--
    Test Name: setBits_0
       Schema: Functions.dfdl.xsd
         Root: setBits
      Purpose: This test demonstrates the use of the setBits function to set the bits of a byte
-->

	<tdml:parserTestCase name="setBits_0" root="setBits"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:setBits - DFDL-23-131R">

		<tdml:document>
			<tdml:documentPart type="bits">00000000
			</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<setBits>
					<e>0</e>
					<e0>1</e0>
					<e1>2</e1>
					<e2>4</e2>
					<e3>8</e3>
					<e4>16</e4>
					<e5>32</e5>
					<e6>64</e6>
					<e7>128</e7>
					<e8>255</e8>
				</setBits>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: setBits_1
       Schema: Functions.dfdl.xsd
         Root: setBits
      Purpose: This test demonstrates the misuse of the setBits function. The number of arguments is incorrect and the
               test should fail.
-->

	<tdml:parserTestCase name="setBits_1" root="setBits1"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:setBits - DFDL-23-131R">

		<tdml:document>
			<tdml:documentPart type="bits">00000000</tdml:documentPart>
		</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>no such function</tdml:error>
      <tdml:error>setBits with arity 6</tdml:error>
    </tdml:errors>
	</tdml:parserTestCase>

<!--
    Test Name: setBits_2
       Schema: Functions.dfdl.xsd
         Root: setBits
      Purpose: This test demonstrates the use of the setBits function to set the bits of a byte
-->

	<tdml:parserTestCase name="setBits_2" root="setBits2"
		model="Functions.dfdl.xsd" description="Section 23 - Functions - dfdl:setBits - DFDL-23-131R">

		<tdml:document>
			<tdml:documentPart type="text">0,0,0,0,1,0,1,1</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<setBits2>
					<e0>0</e0>
					<e1>0</e1>
					<e2>0</e2>
					<e3>0</e3>
					<e4>1</e4>
					<e5>0</e5>
					<e6>1</e6>
					<e7>1</e7>
					<e>11</e>
				</setBits2>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

	<tdml:parserTestCase name="occursCount_0" root="occursCount"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[1,2,3]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<occursCount>
					<i1>1</i1>
					<i2>2</i2>
					<i3>3</i3>
					<!-- <occurs>4</occurs> -->
				</occursCount>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: stringLiteralFromString_0
       Schema: Functions.dfdl.xsd
         Root: stringLiteralFromString
      Purpose: This test demonstrates the use of the stringLiteralFromString function
-->

	<tdml:parserTestCase name="stringLiteralFromString_0"
		root="stringLiteralFromString" model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[%This is a test!%]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<stringLiteralFromString>
					<str>%This is a test!%</str>
					<literal>%%This%SP;is%SP;a%SP;test!%%</literal>
				</stringLiteralFromString>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: stringLiteralFromString_1
       Schema: Functions.dfdl.xsd
         Root: stringLiteralFromString
      Purpose: This test demonstrates the use of the stringLiteralFromString function
-->

	<tdml:parserTestCase name="stringLiteralFromString_1"
		root="stringLiteralFromString" model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="byte"><![CDATA[30 04 31 09 32 0a 33 0b 34]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<stringLiteralFromString>
					<str>01 2 34</str>
					<literal>0%EOT;1%HT;2%LF;3%VT;4</literal>
				</stringLiteralFromString>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: stringLiteralFromString_2
       Schema: Functions.dfdl.xsd
         Root: stringLiteralFromString
      Purpose: This test demonstrates the use of the stringLiteralFromString function
-->

	<tdml:parserTestCase name="stringLiteralFromString_2"
		root="stringLiteralFromString" model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="byte"><![CDATA[01 07 33 0b 0a 09 08 34]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<stringLiteralFromString>
					<str>3 4</str>
					<literal>%SOH;%BEL;3%VT;%LF;%HT;%BS;4</literal>
				</stringLiteralFromString>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: containsEntity_0
       Schema: Functions.dfdl.xsd
         Root: containsEntity
      Purpose: This test demonstrates the use of the containsEntity function to determine if a string contains an entity
-->

	<tdml:parserTestCase name="containsEntity_0" root="containsEntity"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[%This is a test!%]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<containsEntity>
					<str>%This is a test!%</str>
					<hasEntity>true</hasEntity>
				</containsEntity>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: containsEntity_1
       Schema: Functions.dfdl.xsd
         Root: containsEntity1
      Purpose: This test demonstrates the use of the containsEntity function to determine if a string contains an entity
               In this case the string does not contain an entity
-->

	<tdml:parserTestCase name="containsEntity_1" root="containsEntity1"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[This is a test!]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<containsEntity1>
					<str>This is a test!</str>
					<hasEntity>false</hasEntity>
				</containsEntity1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: containsEntity_2
       Schema: Functions.dfdl.xsd
         Root: containsEntity1
      Purpose: This test demonstrates the use of the containsEntity function to determine if a string contains an entity
               In this case the string contains an entity
-->

	<tdml:parserTestCase name="containsEntity_2" root="containsEntity1"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart replaceDFDLEntities="false" type="text">%NUL;%SOH;;;%%;</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<containsEntity1>
					<str>%NUL;%SOH;;;%%;</str>
					<hasEntity>true</hasEntity>
				</containsEntity1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: containsEntity_3
       Schema: Functions.dfdl.xsd
         Root: containsEntity1
      Purpose: This test demonstrates the use of the containsEntity function to determine if a string contains an entity
               In this case the string contains an entity
-->

	<tdml:parserTestCase name="containsEntity_3" root="containsEntity1"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart replaceDFDLEntities="false" type="text">%NUL;%SP;-</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<containsEntity1>
				  <str>%NUL;%SP;-</str>
					<hasEntity>true</hasEntity>
				</containsEntity1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: containsEntity_4
       Schema: Functions.dfdl.xsd
         Root: containsEntity1
      Purpose: This test demonstrates the use of the containsEntity function to determine if a string contains an entity
               In this case the string contains an entity
-->

	<tdml:parserTestCase name="containsEntity_4" root="containsEntity1"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart replaceDFDLEntities="false" type="text">%HT;%LF;</tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<containsEntity1>
					<str>%HT;%LF;</str>
					<hasEntity>true</hasEntity>
				</containsEntity1>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: valueLength_0
       Schema: Functions.dfdl.xsd
         Root: valueLength
      Purpose: This test demonstrates the valueLength function (formerly unpaddedLength).
-->

	<tdml:parserTestCase name="valueLength_0" root="valueLength"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[////test////]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<valueLength>
					<str>test</str>
					<valLen>4</valLen>
				</valueLength>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: valueLength_1
       Schema: Functions.dfdl.xsd
         Root: valueLength2
      Purpose: This test demonstrates the valueLength function (formerly unpaddedLength).
-->

	<tdml:parserTestCase name="valueLength_1" root="valueLength2"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[////test////]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<valueLength2>
					<str>test</str>
					<valLen>4</valLen>
				</valueLength2>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: contentLength_0
       Schema: Functions.dfdl.xsd
         Root: contentLength
      Purpose: This test demonstrates the contentLength function (formerly representationLength).
-->

	<tdml:parserTestCase name="contentLength_0" root="contentLength"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[////test////]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<contentLength>
					<str>test</str>
					<conLen>12</conLen>
				</contentLength>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

<!--
    Test Name: contentLength_1
       Schema: Functions.dfdl.xsd
         Root: contentLength2
      Purpose: This test demonstrates the contentLength function (formerly representationLength).
-->

	<tdml:parserTestCase name="contentLength_1" root="contentLength2"
		model="Functions.dfdl.xsd" description="Section 23 ">

		<tdml:document>
			<tdml:documentPart type="text"><![CDATA[////test////]]></tdml:documentPart>
		</tdml:document>
		<tdml:infoset>
			<tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<contentLength2>
					<str>test</str>
					<conLen>12</conLen>
				</contentLength2>
			</tdml:dfdlInfoset>
		</tdml:infoset>
	</tdml:parserTestCase>

</tdml:testSuite>
