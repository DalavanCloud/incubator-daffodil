<?xml version="1.0" encoding="UTF-8"?>
<tdml:testSuite xmlns="http://example.com"
  xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset"
  xmlns:ex="http://example.com">

  <tdml:defineSchema name="v">
    <dfdl:defineVariable name="v_no_default" type="xsd:int" />
    <dfdl:defineVariable name="v_with_default" type="xsd:int"
      defaultValue="42" />
    <dfdl:defineVariable name="myVar1" type="xs:int"
      defaultValue="6" />
    <dfdl:format ref="ex:daffodilTest1" />
    <xs:element name="c">
      <xs:complexType>
        <xs:sequence>

          <xs:element name="d" type="xsd:int"
            dfdl:inputValueCalc="{ $ex:v_with_default }">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v_no_default">{ . }</dfdl:setVariable>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="e" type="xsd:int"
            dfdl:inputValueCalc="{ $ex:v_no_default }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r1">
      <xs:complexType>
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
              <dfdl:setVariable ref="ex:v_no_default">{ 41 }</dfdl:setVariable>
              <dfdl:setVariable ref="ex:v_no_default">{ 42 }</dfdl:setVariable>
            </xs:appinfo>
          </xs:annotation>
          <xs:element name="d" type="xsd:int"
            dfdl:inputValueCalc="{ $ex:v_no_default }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="r2">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="d" type="xsd:int"
            dfdl:inputValueCalc="{ $ex:v_with_default }" />
          <xs:element name="e" type="xsd:string"
            dfdl:inputValueCalc="{ 'just here to carry the setVariable annotation' }">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v_with_default">{ 41 }</dfdl:setVariable>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="a">
      <xs:complexType>
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
              <dfdl:newVariableInstance ref="ex:myVar1"
                defaultValue="7" />
            </xs:appinfo>
          </xs:annotation>
          <xs:element name="b" type="xsd:int"
            dfdl:inputValueCalc="{ $ex:myVar1 }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e1">
      <xs:complexType>
        <xs:sequence dfdl:separator="{ $ex:v1_with_default }"
          dfdl:separatorPosition="infix">
          <xs:element name="b" type="xsd:int" maxOccurs="unbounded"
            dfdl:lengthKind="delimited" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e2" type="xsd:string"
      dfdl:inputValueCalc="{ $ex:v1_with_default }" />

    <dfdl:defineVariable name="v1_with_default">,</dfdl:defineVariable>
    <dfdl:defineVariable name="v1_no_default" />
    <dfdl:defineVariable name="v2_with_default"
      type="xsd:int">7</dfdl:defineVariable>

    <xs:element name="day" type="xsd:int" />
    <xs:element name="e3">
      <xs:complexType>
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
              <dfdl:setVariable ref="ex:v1_no_default">{ "January" }</dfdl:setVariable>
            </xs:appinfo>
          </xs:annotation>
          <xs:element name="month" type="xsd:string"
            dfdl:inputValueCalc="{ $ex:v1_no_default }" />
          <xs:element ref="day" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v2_with_default">{ 9 }</dfdl:setVariable>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="hour" type="xsd:int"
            dfdl:inputValueCalc="{ $ex:v2_with_default }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="e4" dfdl:lengthKind="implicit">
      <xs:complexType>
        <xs:sequence>
          <xs:choice>
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v1_no_default">{ "January" }</dfdl:setVariable>
              </xs:appinfo>
            </xs:annotation>
            <xs:element name="Sale" type="xs:string"
              dfdl:lengthKind="delimited">
              <xs:annotation>
                <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                  <dfdl:setVariable ref="ex:v2_with_default">{ 29 }</dfdl:setVariable>
                  <dfdl:assert><![CDATA[{ xs:string(.) eq "Friday" }]]></dfdl:assert>
                </xs:appinfo>
              </xs:annotation>
            </xs:element>
            <xs:element name="NoSale" type="xs:string"
              dfdl:lengthKind="delimited">
              <xs:annotation>
                <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                  <dfdl:assert><![CDATA[{ xs:string(.) eq "Monday" }]]></dfdl:assert>
                  <dfdl:setVariable ref="ex:v2_with_default">{ 36 }</dfdl:setVariable>
                </xs:appinfo>
              </xs:annotation>
            </xs:element>
          </xs:choice>
          <xsd:element name="month" type="xs:string"
            dfdl:inputValueCalc="{ $ex:v1_no_default }" />
          <xsd:element name="price" type="xs:int"
            dfdl:inputValueCalc="{ $ex:v2_with_default }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:simpleType name="s1">
      <xs:annotation>
        <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
          <dfdl:setVariable ref="ex:v_no_default">{ 41 }</dfdl:setVariable>
        </xs:appinfo>
      </xs:annotation>
      <xs:restriction base="xs:int" />
    </xs:simpleType>

    <xs:group name="g5">
      <xs:sequence>
        <xs:element name="month" type="xsd:string"
          dfdl:inputValueCalc="{ $ex:v1_no_default }" />
        <xs:element ref="day" dfdl:lengthKind="explicit"
          dfdl:length="2" />
      </xs:sequence>
    </xs:group>

    <xs:element name="e5">
      <xs:complexType>
        <xs:group ref="ex:g5">
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
              <dfdl:setVariable ref="ex:v1_no_default">{ "January" }</dfdl:setVariable>
            </xs:appinfo>
          </xs:annotation>
        </xs:group>
      </xs:complexType>
    </xs:element>

    <xs:element name="e6">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" type="ex:s1" dfdl:lengthKind="delimited" />
          <xs:element name="e2" type="xs:int"
            dfdl:inputValueCalc="{ $ex:v_no_default }" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <dfdl:defineVariable name="badscope" type="xs:int" defaultValue="70"/>

  </tdml:defineSchema>

  <tdml:parserTestCase name="setVar1" root="c"
    model="v" description="Use of defineVariable and setVariable - DFDL-7-091R">

    <tdml:document />

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <c xmlns="http://www.example.org/example1/">
          <d type="xsd:int">42</d>
          <e type="xsd:int">42</e>
        </c>

      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="doubleSetErr" root="r1"
    model="v"
    description="Error to set the value of a variable instance twice - DFDL-7-130R">

    <tdml:document />

    <tdml:errors>
      <tdml:error>variable</tdml:error>
      <tdml:error>twice</tdml:error>
      <tdml:error>v_no_default</tdml:error>
    </tdml:errors>

  </tdml:parserTestCase>

  <tdml:parserTestCase name="setAfterReadErr" root="r2"
    model="v"
    description="Error to set the value of a variable instance after it is referenced - DFDL-7-131R">

    <tdml:document />

    <tdml:errors>
      <tdml:error>variable</tdml:error>
      <tdml:error>after</tdml:error>
      <tdml:error>v_with_default</tdml:error>
    </tdml:errors>

  </tdml:parserTestCase>

  <tdml:parserTestCase name="varInstance" root="a"
    model="v">

    <tdml:document />

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <a xmlns="http://www.example.org/example1/">
          <b type="xsd:int">7</b>
        </a>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="varAsSeparator" root="e1"
    model="v"
    description="variable referenced as a separator; the defineVariable annotation occurs after the element declaration that references it - DFDL-7-107R">
    <tdml:document><![CDATA[23,45,110]]></tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e1 xmlns="http://www.example.org/example1/">
          <b type="xsd:int">23</b>
          <b type="xsd:int">45</b>
          <b type="xsd:int">110</b>
        </e1>

      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="setVarOnSeqAndElemRef"
    root="e3" model="v"
    description="setVariable on a sequence and an element reference - DFDL-7-121R">
    <tdml:document><![CDATA[23]]></tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e3 xmlns="http://www.example.org/example1/">
          <month>January</month>
          <day>23</day>
          <hour>9</hour>
        </e3>

      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="setVarChoice" root="e4"
    model="v"
    description="setVariable on a choice and choice branches - DFDL-7-132R, DFDL-7-121R">
    <tdml:document><![CDATA[Monday]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e4 xmlns="http://www.example.org/example1/">
          <NoSale>Monday</NoSale>
          <month>January</month>
          <price>36</price>
        </e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="setVarOnGroupRef" root="e5"
    model="v" description="setVariable on a group reference - DFDL-7-121R">
    <tdml:document><![CDATA[23]]></tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e5 xmlns="http://www.example.org/example1/">
          <month>January</month>
          <day>23</day>
        </e5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:parserTestCase name="setVarSimpleType" root="e6"
    model="v" description="setVariable on a simpleType - DFDL-7-121R">
    <tdml:document><![CDATA[23]]></tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e6 xmlns="http://www.example.org/example1/">
          <e1>23</e1>
          <e2>41</e2>
        </e6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:defineSchema name="setVarSchema">
    <dfdl:defineVariable name="v_no_default" type="xs:int" />
    <dfdl:defineVariable name="v_with_default" type="xs:int"
      defaultValue="42" />
    <dfdl:defineVariable name="myVar1" type="xs:int" />

    <dfdl:format ref="ex:daffodilTest1" />

    <xs:element name="r1">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="one" type="xs:int" dfdl:inputValueCalc="{ $ex:v_with_default }" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v_no_default" value="{ 41 }" />
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="two" type="xs:int" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ $ex:v_no_default }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="r2">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="one" type="xs:int" dfdl:inputValueCalc="{ $ex:v_with_default }" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v_no_default" value="{ 41 }">{ 42 }</dfdl:setVariable>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="two" type="xs:int" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ $ex:v_no_default }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="r3">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="one" type="xs:int" dfdl:inputValueCalc="{ $ex:v_with_default }" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:v_no_default">{ "BEEEP" }</dfdl:setVariable>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="two" type="xs:int" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ $ex:v_no_default }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <dfdl:defineVariable name="holder" type="xs:int" />
    
    <xs:element name="r4">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="one" type="xs:int" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:holder" value="{ (.) }" />
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="two" type="xs:int" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ $ex:holder - 1 }"/>
          <xs:element name="three" type="xs:int" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ $ex:holder + 1 }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <dfdl:defineVariable name="holder2" type="xs:int" />
    
    <xs:element name="r5">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="one" type="xs:string" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:holder2" value="{ (.) }" />
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="two" type="xs:int" dfdl:lengthKind="delimited" dfdl:inputValueCalc="{ $ex:holder - 1 }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <dfdl:defineVariable name="counter" type="xs:int" />

    <xs:element name="r6">
      <xs:complexType>
        <xs:sequence dfdl:separator=",">
          <xs:element name="one" type="xs:int" dfdl:lengthKind="delimited"/>
          <xs:element name="two" type="xs:string" dfdl:lengthKind="delimited">
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/dfdl-1.0/">
                <dfdl:setVariable ref="ex:counter" value="{ if ((xs:int(../ex:one)) lt 5) then 1 else 0 }" />
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="three" type="xs:int" dfdl:inputValueCalc=" { $ex:counter } " dfdl:lengthKind="delimited"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="r7" type="xs:int" dfdl:inputValueCalc=" { $ex:badscope } " dfdl:lengthKind="delimited"/>
    <xs:element name="r8" type="xs:int" dfdl:inputValueCalc=" { $ex:v_no_default } " dfdl:lengthKind="delimited"/>
    
    <dfdl:defineVariable name="varb" type="xs:int" />

    <xs:element name="r9">
      <xs:complexType>
        <xs:sequence dfdl:separator="." dfdl:separatorPosition="infix">
        <xs:choice>
          <xs:element name="one" type="xs:int" dfdl:lengthKind="delimited"/>
          <xs:element name="two" type="xs:string" dfdl:lengthKind="delimited"/>
        </xs:choice>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

  </tdml:defineSchema>
  
  <tdml:defineSchema name="absolutePath">
    
  <dfdl:format ref="ex:daffodilTest1"/>
    
    <xs:element name="elem">
      <xs:complexType>
        <xs:sequence dfdl:separator="|">
          <xs:element name="header">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="sep" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="1"/>
                <xs:element name="term" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="1"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="item" type="ex:reffed" dfdl:lengthKind="explicit" dfdl:length="4"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:simpleType name="reffed" dfdl:separator="{ /ex:elem/ex:header/ex:sep/text() }" dfdl:terminator="{ /ex:elem/ex:header/ex:term/text() }">
      <xs:restriction base="xs:string"/>
    </xs:simpleType>

  </tdml:defineSchema>
  
<!--
     Test: setVarAbsolutePath
   Schema: absolutePath
     Root: elem
  Purpose: This test uses the parsed values of elements as formatting parameters WITHOUT
           using setVariable
-->
  
  <tdml:parserTestCase name="setVarAbsolutePath" root="elem"
    model="absolutePath" description="Section 7 - setVariable - DFDL-7-127R">
    <tdml:document>,.|test.</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <elem>
          <header>
            <sep>,</sep>
            <term>.</term>
          </header>
          <item>test</item>
        </elem>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test: setVarValAttribute
   Schema: setVarSchema
     Root: r1 
  Purpose: This test uses a schema that demonstrates the use of the dfdl:value attribute to specify a variable value
-->
  
  <tdml:parserTestCase name="setVarValAttribute" root="r1"
    model="setVarSchema" description="Section 7 - setVariable supports both a value attribute and a 'value' - DFDL-7-122R">
    <tdml:document/>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <r1 xmlns="http://www.example.org/example1/">
          <one>42</one>
          <two>41</two>
        </r1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test: setVarValAttribute2
   Schema: setVarSchema
     Root: r2
  Purpose: This test uses a schema uses both the dfdl:value attribute and the element value
           to specify a variable value and should cause an error
-->
  
  <tdml:parserTestCase name="setVarValAttribute2" root="r2"
    model="setVarSchema" description="Section 7 - setVariable supports both a value attribute and a 'value' - DFDL-7-122R">
    <tdml:document/>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Cannot have both a value attribute and an element value</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test: setVarTypeMismatch
   Schema: setVarSchema
     Root: r3
  Purpose: This test sets an int variable to a string and should fail
-->
  
  <tdml:parserTestCase name="setVarTypeMismatch" root="r3"
    model="setVarSchema" description="Section 7 - setVariable - value matches defineVariable - DFDL-7-124R">
    <tdml:document/>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Cannot convert BEEEP to Int</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test: setVarCurrVal
   Schema: setVarSchema
     Root: r4
  Purpose: This test sets a variable with the value of the first element
-->
  
  <tdml:parserTestCase name="setVarCurrVal" root="r4"
    model="setVarSchema" description="Section 7 - setVariable - relative path value - DFDL-7-125R">
    <tdml:document>54</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
      <r4>
        <one>54</one>
        <two>53</two>
        <three>55</three>
      </r4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test: setVarMismatchRelative
   Schema: setVarSchema
     Root: r5
  Purpose: This test sets a variable with the value of the first element with an incorrect type
-->
  
  <tdml:parserTestCase name="setVarMismatchRelative" root="r5"
    model="setVarSchema" description="Section 7 - setVariable - relative path value - DFDL-7-125R">
    <tdml:document>boat</tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Expression { (.) } evaluated to something that is not a number (NaN): boat.</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test: setVarExpression
   Schema: setVarSchema
     Root: r6
  Purpose: This test sets a variable with a relative expression
-->
  
  <tdml:parserTestCase name="setVarExpression" root="r6"
    model="setVarSchema" description="Section 7 - setVariable - relative path expression - DFDL-7-126R">
    <tdml:document>8,is it less than 5</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <r6>
          <one>8</one>
          <two>is it less than 5</two>
          <three>0</three>
        </r6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test: setVarExpression2
   Schema: setVarSchema
     Root: r6
  Purpose: This test sets a variable with a relative expression
-->
  
  <tdml:parserTestCase name="setVarExpression2" root="r6"
    model="setVarSchema" description="Section 7 - setVariable - relative path expression - DFDL-7-126R">
    <tdml:document>3,is it less than 5</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <r6>
          <one>3</one>
          <two>is it less than 5</two>
          <three>1</three>
        </r6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
     Test: setVarBadScope
   Schema: setVarSchema
     Root: r7
  Purpose: This test tries to use a variable that is defined in another schema
-->
  
  <tdml:parserTestCase name="setVarBadScope" root="r7"
    model="setVarSchema" description="Section 7 - setVariable - variable scope - DFDL-7-128R">
    <tdml:document>6</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

<!--
     Test: setVarBadScope2
   Schema: setVarSchema
     Root: r8
  Purpose: This test tries to use a variable that is given a value outside of the scope
-->
  
  <tdml:parserTestCase name="setVarBadScope2" root="r8"
    model="setVarSchema" description="Section 7 - setVariable - variable scope - DFDL-7-128R">
    <tdml:document>6</tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>

  <tdml:defineSchema name="choiceInSequenceWithSeparators">
    <dfdl:format ref="ex:daffodilTest1" lengthKind="delimited" />

    <xs:element name="ch1">
      <xs:complexType>
        <xs:sequence dfdl:separator="/" dfdl:separatorPosition="infix">
          <xs:choice>
            <xs:element name="foo" type="xs:int" />
            <xs:element name="bar" type="xs:string" />
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </tdml:defineSchema>

</tdml:testSuite>
