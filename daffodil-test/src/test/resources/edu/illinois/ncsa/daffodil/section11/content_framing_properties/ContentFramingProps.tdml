<?xml version="1.0" encoding="UTF-8"?>
<tdml:testSuite xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com"
  xmlns:fn="http://www.w3.org/2005/xpath-functions" >

  <tdml:defineSchema name="ContentFramingProperties-Embedded.dfdl.xsd">


    <dfdl:format ref="ex:daffodilTest1" lengthKind="delimited"
      lengthUnits="characters" encoding="UTF-8" />

    <xs:element name="CFP_01" type="cfp_01" />
    <xs:simpleType name="cfp_01">
      <xs:annotation>
        <xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:simpleType lengthKind="explicit" length="3"
            encoding="UTF-16" byteOrder="bigEndian" />
        </xs:appinfo>
      </xs:annotation>
      <xs:restriction base="xs:string" />
    </xs:simpleType>
    
    <xs:element name="root">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="1"/>
          <xs:element name="e2" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="1"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="root1">
      <xs:complexType>
        <xs:sequence>
          <xs:element name="e1" type="xs:string" dfdl:lengthKind="explicit"
            dfdl:length="5" />
          <xs:element name="e2" type="xs:string" dfdl:lengthKind="explicit"
            dfdl:length="1" dfdl:encoding="{ ../ex:e1 }"/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
    
    <xs:element name="e3" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="1" />

  </tdml:defineSchema>

  <tdml:parserTestCase name="UTF_16_01" root="CFP_01"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Section 11 encoding - DFDL-11-002R">

    <tdml:document>
      <tdml:documentPart type="byte">006300610074</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <CFP_01>cat</CFP_01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="encoding_property_expression" root="root1"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Use of DFDL expression for encoding property - DFDL-11-002R">
    <tdml:document><tdml:documentPart type="text">ASCII</tdml:documentPart><tdml:documentPart type="byte">31</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <root1>
        <e1>855</e1>
        <e2>1</e2>
        </root1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
 
  <tdml:parserTestCase name="xml_illegal_chars" root="root"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Section 11 encoding is utf-8 - DFDL-11-002R">

    <tdml:document>
      <tdml:documentPart type="byte">000f</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <root>
          <e1>&#57344;</e1>
          <e2>&#57359;</e2>
        </root>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="xml_illegal_chars_01" root="e3"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Section 11 encoding is utf-8 - DFDL-11-002R">
    <tdml:document><tdml:documentPart replaceDFDLEntities="true" type="text">%#xFFFF;</tdml:documentPart></tdml:document>
    <!-- Note that we use an illegal codepoint above that is NOT a high surrogate or a low surrogate,
    but a character that is a valid codepoint for unicode, but not for XML.
    The problem is, if we use a surrogate (high or low), the decoder will not accept it so 
    we can't present it as a data character to the parser since we can't even get at it as text.
     --> 
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e3>&#xF0FF;</e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="xml_illegal_chars_02" root="e3"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Section 11 encoding is utf-8 - DFDL-11-002R">
    <tdml:document><tdml:documentPart type="byte">efbfbf</tdml:documentPart></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e3>&#61695;</e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
   
  <tdml:parserTestCase name="xml_utf8_4byte_chars" root="e3"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Section 11 encoding is utf-8 - DFDL-11-002R">
    <tdml:document>&#x10000;</tdml:document>
    <!-- That's the minimum Unicode character value that takes 4 bytes to encode in utf-8 -->
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e3>&#x10000;</e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <tdml:parserTestCase name="xml_utf8_4byte_chars_01" root="e3"
    model="ContentFramingProperties-Embedded.dfdl.xsd" description="Section 11 encoding is utf-8 - DFDL-11-002R">
    <tdml:document><tdml:documentPart type="byte">f0 90 80 80</tdml:documentPart></tdml:document>
    <!-- That's the minimum Unicode character value that takes 4 bytes to encode in utf-8 -->
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e3>&#x10000;</e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <tdml:defineSchema name="packed7BitASCII">

    <dfdl:format ref="ex:daffodilTest1" encoding="US-ASCII-7-bit-packed"
      lengthUnits="characters" />

    <xs:element name="e1" type="xs:string" dfdl:lengthKind="explicit"
      dfdl:length="2" />
    <xs:element name="e2" type="xs:string" dfdl:lengthKind="explicit"
      dfdl:length="64" />
    <xs:element name="e3" type="xs:string" dfdl:lengthKind="delimited"
      dfdl:terminator="," />

    <!-- USES proposed dfdl:string constructor to process the entities
      so that we can put %NUL; in an expression. -->
    <xs:element name="e4" type="ex:zString" />
    <xs:complexType name="zString">
      <xs:sequence>

        <xs:sequence>
          <!-- wants to be a hidden group. We want the name 's' as the public
            interface to this type, but the rep element invisible to users
            of the type. -->
          <xs:element name="rep" type="xs:string"
            dfdl:lengthKind="pattern" dfdl:lengthPattern="[^\x00]{0,3}\x00|[^\x00]{4}"
            dfdl:outputValueCalc="{ 
            if (fn:string-length(../ex:s) lt 4) 
            then fn:concat(../ex:s, dfdl:string('%NUL;')) 
            else ../ex:s 
            }" />
        </xs:sequence>

        <xs:element name="s" type="xs:string"
          dfdl:inputValueCalc="{ 
               if ((fn:string-length(../ex:rep) eq 4) 
                    and fn:not(fn:ends-with(../ex:rep, dfdl:string('%NUL;'))))
                    then ../ex:rep
               else fn:substring(../ex:rep, 1, fn:string-length(../ex:rep) - 1)
             }" />
      </xs:sequence>
    </xs:complexType>

    <!-- Similar, but delimiter is DEL (ascii 0x7F) -->
    <xs:element name="e5" type="ex:dString" />
    <xs:complexType name="dString">
      <xs:sequence>
        <xs:sequence>
          <!-- wants to be a hidden group. We want the name 's' as the public
            interface to this type, but the rep element invisible to users
            of the type. -->
          <xs:element name="rep" type="xs:string"
            dfdl:lengthKind="pattern" dfdl:lengthPattern="[^\x7F]{0,3}\x7F|[^\x7F]{4}"
            dfdl:outputValueCalc="{ 
            if (fn:string-length(../ex:s) lt 4) 
            then fn:concat(../ex:s, dfdl:string('%DEL;')) 
            else ../ex:s 
            }" />
        </xs:sequence>

        <xs:element name="s" type="xs:string"
          dfdl:inputValueCalc="{ 
               if ((fn:string-length(../ex:rep) eq 4) 
                    and fn:not(fn:ends-with(../ex:rep, dfdl:string('%DEL;'))))
                    then ../ex:rep
               else fn:substring(../ex:rep, 1, fn:string-length(../ex:rep) - 1)
             }" />
      </xs:sequence>
    </xs:complexType>

    <xs:element name="e6" type="xs:string" dfdl:lengthKind="delimited"
      dfdl:terminator="" dfdl:representation="text" dfdl:alignmentUnits="bits" dfdl:alignment="4" />
    
    <xs:element name="e7" type="xs:string" dfdl:lengthKind="delimited"
      dfdl:terminator="" dfdl:representation="text" dfdl:alignmentUnits="bits" dfdl:alignment="6" dfdl:leadingSkip="5"/>

  </tdml:defineSchema>

  <!--
    Test name: packed7BitASCII1
    Schema: packed7BitASCII
    Purpose: This test demonstrates the simple use of the US-ASCII-7-bit-packed 
    encoding, where the document represents
    two US-ASCII-7-bit-packed characters in binary.
  -->

  <tdml:parserTestCase name="packed7BitASCII1" root="e1"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110100 0110010
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e1>42</e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII2
    Schema: packed7BitASCII
    Purpose: This test demonstrates the simple use of the US-ASCII-7-bit-packed 
    encoding, where the document represents
    64 US-ASCII-7-bit-packed characters in binary.
  -->

  <tdml:parserTestCase name="packed7BitASCII2" root="e2"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0110010 0110011 0110100 0110101 0110110 0110111 0111000 0111001 0110000
      0110001 0110010 0110011 0110100 0110101 0110110 0110111 0111000 0111001 0110000
      0110001 0110010 0110011 0110100 0110101 0110110 0110111 0111000 0111001 0110000
      0110001 0110010 0110011 0110100 0110101 0110110 0110111 0111000 0111001 0110000
      0110001 0110010 0110011 0110100 0110101 0110110 0110111 0111000 0111001 0110000
      0110001 0110010 0110011 0110100 0110101 0110110 0110111 0111000 0111001 0110000
      0110001 0110010 0110011 0110100 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e2>1234567890123456789012345678901234567890123456789012345678901234</e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII3
    Schema: packed7BitASCII
    Purpose: This test demonstrates the simple use of the US-ASCII-7-bit-packed 
    encoding, where the document represents
    two US-ASCII-7-bit-packed characters in binary, one being the terminator 
    ","
  -->

  <tdml:parserTestCase name="packed7BitASCII3" root="e3"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0101100 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e3>1</e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII4
    Schema: packed7BitASCII
    Purpose: This test demonstrates a more complex use of the US-ASCII-7-bit-packed 
    encoding, where delimited by NUL, which is illegal in XML so is remapped to E000.
  -->

  <tdml:parserTestCase name="packed7BitASCII4" root="e4"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0000000 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e4>
          <rep>1&#xE000;</rep> <!-- should be hidden once that feature is implemented. -->
          <s>1</s>
        </e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII5
    Schema: packed7BitASCII
    -->

  <tdml:parserTestCase name="packed7BitASCII5" root="e4"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0110010 0110011 0110100 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e4>
          <rep>1234</rep> <!-- should be hidden once that feature is implemented. -->
          <s>1234</s>
        </e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII6
    Schema: packed7BitASCII
    Purpose: This test demonstrates a more complex use of the US-ASCII-7-bit-packed.
    The NUL character, illegal in XML, is remapped into the private use area to E000. 
  -->

  <tdml:parserTestCase name="packed7BitASCII6" root="e4"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0110010 0110011 0000000 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e4>
          <rep>123&#xE000;</rep> <!-- should be hidden once that feature is implemented. -->
          <s>123</s>
        </e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII7
    Schema: packed7BitASCII
    Purpose: This test demonstrates the use of lengthPatterns with packed7BitASCII. 
    The lengthPattern is
    0-3 occurrences of not a 0x7F, followed by a 0x7F, or 4 occurrence of not a 7F. 
  -->

  <tdml:parserTestCase name="packed7BitASCII7" root="e5"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0110010 0110011 0110100 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e5>
          <rep>1234</rep> <!-- should be hidden once that feature is implemented. -->
          <s>1234</s>
        </e5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII8
    Schema: packed7BitASCII
    Purpose: This test demonstrates the use of lengthPatterns with packed7BitASCII. 
    The lengthPattern is
    0-4 occurrences of not a 0x7F (11111111), followed by a 0x7F
  -->

  <tdml:parserTestCase name="packed7BitASCII8" root="e5"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0110010 0110011 1111111 
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e5>
          <rep>123&#x7F;</rep> <!-- should be hidden once that feature is implemented. -->
          <s>123</s>
        </e5> 
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

  <!--
    Test name: packed7BitASCII9
    Schema: packed7BitASCII
    Purpose: This test demonstrates the use of lengthPatterns with packed7BitASCII. 
    The lengthPattern is
    0-4 occurrences of not a 0x7F (11111111), followed by a 0x7F. In this 
    case there is more
    data than the length determined by the pattern.
  -->

  <tdml:parserTestCase name="packed7BitASCII9" root="e5"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110001 0110010 0110011 1111111 01011010
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:errors>
      <tdml:error>Left over data</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: alignmentPacked7BitASCII
    Schema: packed7BitASCII
    Purpose: This test demonstrates that the required alignment for 7-bit ASCII is 1 bit.
  -->

  <tdml:parserTestCase name="alignmentPacked7BitASCII" root="e6"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits"><![CDATA[
      0110100 0110010
      ]]></tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e6>42</e6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: alignmentPacked7BitASCII_02
    Schema: packed7BitASCII
    Purpose: This test demonstrates that the required alignment for 7-bit ASCII is any multiple of 1 bit.
  -->

  <tdml:parserTestCase name="alignmentPacked7BitASCII_02" root="e7"
    model="packed7BitASCII">
    <tdml:document>
      <tdml:documentPart type="bits">01010 0110100 0110010</tdml:documentPart>
    </tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <e7>42</e7>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

</tdml:testSuite>
