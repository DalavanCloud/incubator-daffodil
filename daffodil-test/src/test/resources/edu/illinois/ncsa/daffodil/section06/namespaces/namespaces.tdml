<?xml version="1.0" encoding="UTF-8"?>
<testSuite suiteName="Namespaces"
  xmlns="http://www.ibm.com/xmlns/dfdl/testData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:ct="http://w3.ibm.com/xmlns/dfdl/ctInfoset" xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData">

  <tdml:parserTestCase name="Lesson2_no_namespace" root="address"
    model="address_no_namespace.dfdl.xsd" description="dfdl namespace - DFDL-6-002R">
    <tdml:document><![CDATA[118*Ridgewood Circle*Rochester*NY]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <address> 
          <houseNumber>118</houseNumber>
          <street>Ridgewood Circle</street>
          <city>Rochester</city>
          <state>NY</state>
          </address>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: Lesson2_include_schema
       Schema: customer_no_namespace.dfdl.xsd
         Root: customer
      Purpose: This test demonstrates the use of xs:include to include external schemas. In this case an element in the customer
               sequence is a reference to the "address" element in the external schema.
  -->
 
  <tdml:parserTestCase name="Lesson2_include_schema" root="customer"
    model="customer_no_namespace.dfdl.xsd" description="include a schema - DFDL-6-007R">
    <tdml:document><![CDATA[James*River*118*Ridgewood Circle*Rochester*NY]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <customer>
          <firstName>James</firstName>
          <surname>River</surname>
          <address> 
            <houseNumber>118</houseNumber>
            <street>Ridgewood Circle</street>
            <city>Rochester</city>
            <state>NY</state>
          </address>
        </customer>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: Lesson2_import_schema
       Schema: customer_namespace.dfdl.xsd
         Root: customer
      Purpose: This test demonstrates the use of xs:import to include external schemas. In this case an element in the customer
               sequence is a reference to the "address" element in the external schema.
  -->
  
  <tdml:parserTestCase name="Lesson2_import_schema" root="customer"
    model="customer_namespace.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[James*River*118*Ridgewood Circle*Rochester*NY]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <customer>
          <firstName>James</firstName>
          <surname>River</surname>
          <address> 
            <houseNumber>118</houseNumber>
            <street>Ridgewood Circle</street>
            <city>Rochester</city>
            <state>NY</state>
          </address>
        </customer>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_cyclical
       Schema: cycle_base.dfdl.xsd
         Root: elem
      Purpose: This test demonstrates the use of xs:import to create an infinite loop. The loop should be caught
               and an error should be thrown.
  -->
  
  <tdml:parserTestCase name="multifile_cyclical" root="elem"
    model="cycle_base.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[1234]]></tdml:document>
    <tdml:errors>
      <tdml:error/>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_choice_01
       Schema: multi_base_01.dfdl.xsd
         Root: choice01
      Purpose: This test demonstrates the creation of a choice whose elements exist in multiple schemas.
               In this case none of the choice elements are applicable and parsing fails.
  -->
  
  <tdml:parserTestCase name="multifile_choice_01" root="choice01"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[local05:123]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error: Alternative failed</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_choice_02
       Schema: multi_base_01.dfdl.xsd
         Root: choice01
      Purpose: This test demonstrates the creation of a choice whose elements exist in multiple schemas.
  -->
  
  <tdml:parserTestCase name="multifile_choice_02" root="choice01"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[remote01:123]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <choice01>
          <remote01>123</remote01>
        </choice01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_choice_02b
       Schema: multi_base_01.dfdl.xsd
         Root: choice01
      Purpose: This test demonstrates the creation of a choice whose elements exist in multiple schemas.
  -->
  
  <tdml:parserTestCase name="multifile_choice_02b" root="choice01"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[remote01:123]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_choice_03
       Schema: multi_base_01.dfdl.xsd
         Root: choice01
      Purpose: This test demonstrates the creation of a choice whose elements exist in multiple schemas. In this case the
               appropriate element is actually a type in schema A01 based on a simpleType defined in B01, and the choice 
               itself is in base01.
  -->
  
  <tdml:parserTestCase name="multifile_choice_03" root="choice01"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[remote03:5555]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <choice01>
          <remote03>5555</remote03>
        </choice01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_facets_01
       Schema: multi_base_01.dfdl.xsd
         Root: facets01
      Purpose: This test demonstrates the use of an element whose facet restrictions exist across multiple schemas.
  -->
  
  <tdml:parserTestCase name="multifile_facets_01" root="facets01"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[10]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <facets01>10</facets01>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_facets_02
       Schema: multi_base_01.dfdl.xsd
         Root: facets01
      Purpose: This test demonstrates the use of an element whose facet restrictions exist across multiple schemas.
  -->
  
  <tdml:parserTestCase name="multifile_facets_02" root="facets01"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[11]]></tdml:document>
      <tdml:errors>
        <tdml:error>Assertion</tdml:error>
        <tdml:error>failed</tdml:error>
        <tdml:error>dfdl:checkConstraints</tdml:error>
      </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_facets_03
       Schema: multi_base_01.dfdl.xsd
         Root: facets02
      Purpose: This test demonstrates the use of an element whose facet restrictions exist across multiple schemas.
  -->
  
  <tdml:parserTestCase name="multifile_facets_03" root="facets02"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[10]]></tdml:document>
      <tdml:errors>
        <tdml:error>Schema Definition Error</tdml:error>
        <tdml:error>MinExclusive(11) must be less than or equal to MaxInclusive(10)</tdml:error>
      </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: multifile_facets_04
       Schema: multi_base_01.dfdl.xsd
         Root: facets03
      Purpose: This test demonstrates the use of an element whose facet restrictions exist across multiple schemas.
               In this case both the maxInclusive and maxExclusive facets are defined, so the test should fail.
  -->
  
  <tdml:parserTestCase name="multifile_facets_04" root="facets03"
    model="multi_base_01.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[10]]></tdml:document>
      <tdml:errors>
        <tdml:error>Schema Definition Error</tdml:error>
        <tdml:error>MaxInclusive and MaxExclusive cannot be specified for the same simple type</tdml:error>
      </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: double_nesting_01
       Schema: multi_base_02.dfdl.xsd
         Root: super_seq
      Purpose: This test demonstrates that a schema with no namespace can be included in multiple namespaces
               and its elements can therefore be represented with different namespaces.
  -->
  
  <tdml:parserTestCase name="double_nesting_01" root="super_seq"
    model="multi_base_02.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[1.3.2.5|5:4:3:1]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <super_seq>
          <seq>
            <inty>1</inty>
            <inty>3</inty>
            <inty>2</inty>
            <inty>5</inty>
          </seq>
          <seq>
            <inty>5</inty>
            <inty>4</inty>
            <inty>3</inty>
            <inty>1</inty>
          </seq>
        </super_seq>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: scope_01
       Schema: multi_A_02.dfdl.xsd
         Root: seq2
      Purpose: This test demonstrates that an element used locally within the schema will take on the properties of that schema.
  -->
  
  <tdml:parserTestCase name="scope_01" root="seq2"
    model="multi_A_02.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[3.4.2.1.44.643.3.5.1]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <seq2>
          <inty>3</inty>
          <inty>4</inty>
          <inty>2</inty>
          <inty>1</inty>
          <inty>44</inty>
          <inty>643</inty>
          <inty>3</inty>
          <inty>5</inty>
          <inty>1</inty>
        </seq2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: scope_02
       Schema: multi_base_02.dfdl.xsd
         Root: super_seq2
      Purpose: This test demonstrates that an element used locally within the schema will take on the properties of that schema, 
               even if the element is defined in another schema with different properties.
  -->
  
  <tdml:parserTestCase name="scope_02" root="super_seq2"
    model="multi_base_02.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[3'6'44'22'44'2'1'63'1]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <super_seq2>
          <inty>3</inty>
          <inty>6</inty>
          <inty>44</inty>
          <inty>22</inty>
          <inty>44</inty>
          <inty>2</inty>
          <inty>1</inty>
          <inty>63</inty>
          <inty>1</inty>
        </super_seq2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_01
       Schema: multi_base_03.dfdl.xsd
         Root: rabbitHole
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
               In Schema F, a format is defined.
               In Schema E, a simpleType is declared that references the format in D.
               In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
               In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
               In Schema B, an element is declared of the simpleType in C.
               In Schema A, a sequence of B elements is declared
               In Base Schema, a sequence of A sequences is declared.
  -->
  
  <tdml:parserTestCase name="long_chain_01" root="rabbitHole"
    model="multi_base_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[f:....53....(e)|f:..41..(e)]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <rabbitHole>
          <nestSequence>
            <nest>53</nest>
            <nest>41</nest>
          </nestSequence>
        </rabbitHole>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_02
       Schema: multi_base_03.dfdl.xsd
         Root: rabbitHole2
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema E, a simpleType is declared that references the format in D.
                - In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
                - In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
                - In Schema B, an element is declared of the simpleType in C.
                - In Schema A, a sequence of B elements is declared
                - In Base Schema, a sequence of A sequences is declared.
               In this case, there are overlapping properties across files, and the error should be caught.

  -->
  
  <tdml:parserTestCase name="long_chain_02" root="rabbitHole2"
    model="multi_base_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[f:....53....(e)|f:..41..(e)]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>Overlapping properties</tdml:error>
      <tdml:error>textNumberPadCharacter overlaps between element.nest2 and simpleType.nestType.</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_03
       Schema: multi_base_03.dfdl.xsd
         Root: rabbitHole3
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema E, a simpleType is declared that references the format in D.
                - In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
                - In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
                - In Schema B, an element is declared of the simpleType in C.
                - In Schema A, a sequence of B elements is declared
                - In Base Schema, a sequence of A sequences is declared.
               In this case, length is set to "4" by the global format in Schema C when nestType2 is defined, but lengthKind
               isn't set until Schema A, where it is done locally on the reference to element B.

  -->
  
  <tdml:parserTestCase name="long_chain_03" root="rabbitHole3"
    model="multi_base_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[5632]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <rabbitHole3>
          <nestSequence3>
            <nest3>5632</nest3>
          </nestSequence3>
        </rabbitHole3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_04
       Schema: multi_base_03.dfdl.xsd
         Root: rabbitHole4
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema E, a simpleType is declared that references the format in D.
                - In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
                - In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
                - In Schema B, an element is declared of the simpleType in C.
                - In Schema A, a sequence of B elements is declared
                - In Base Schema, a sequence of A sequences is declared.
               In this case, length is set to "10" on the initial local format definition. Becuase of how scoping works, the
               length is NOT changed to "4" by the global format in Schema C.

  -->
  
  <tdml:parserTestCase name="long_chain_04" root="rabbitHole4"
    model="multi_base_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[5632]]></tdml:document>
    <tdml:errors>
      <tdml:error>Parse Error</tdml:error>
      <tdml:error>Insufficient Bits in field</tdml:error>
      <tdml:error>required 80</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_05
       Schema: multi_base_03.dfdl.xsd
         Root: rabbitHole5
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema E, a simpleType is declared that references the format in D.
                - In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
                - In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
                - In Schema B, an element is declared of the simpleType in C.
                - In Schema A, a sequence of B elements is declared
                - In Base Schema, a sequence of A sequences is declared.
               In this case, lengthKind is never set and an error should be thrown.

  -->
  
  <tdml:parserTestCase name="long_chain_05" root="rabbitHole5"
    model="multi_base_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[5632]]></tdml:document>
    <tdml:errors>
      <tdml:error>Schema Definition Error: Property lengthKind is not defined</tdml:error>
      <tdml:error>Searched these locations</tdml:error>
    </tdml:errors>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_06
       Schema: multi_A_03.dfdl.xsd
         Root: nestSequence6
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema E, a simpleType is declared that references the format in D.
                - In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
                - In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
                - In Schema B, an element is declared of the simpleType in C.
                - In Schema A, a sequence of B elements is declared
               In this case, each Schema file in the chain, starting at F, imposes its own terminator value, named
               after the schema itself (Schema E's terminator is "E", B's is "B", etc.). Each time a new schema is used
               in the chain, the separator is overwritten. Schema B is the last schema in the chain to set this value,
               so the terminator for our data set will be "B".
  -->
  
  <tdml:parserTestCase name="long_chain_06" root="nestSequence6"
    model="multi_A_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[5632B]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nestSequence6>
          <nest5>5632</nest5>
        </nestSequence6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_06b
       Schema: multi_A_03.dfdl.xsd
         Root: nestSequence6b
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema E, a simpleType is declared that references the format in D.
                - In Schema D, a simpleType is declared that uses the simpleType in E as a restriction base.
                - In Schema C, a simpleType is declared that uses the simpleType in D as a restriction base.
                - In Schema B, an element is declared of the simpleType in C.
                - In Schema A, a sequence of B elements is declared
               In this case, each Schema file in the chain, starting at F, imposes its own terminator value, named
               after the schema itself (Schema E's terminator is "E", B's is "B", etc.). However, in Schema C, a terminator
               is defined on the simpleType itself, which takes precedence over global property definitions. Therefore, the
               terminator will be "C!".
  -->
  
  <tdml:parserTestCase name="long_chain_06b" root="nestSequence6b"
    model="multi_A_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[5632C!]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nestSequence6b>
          <nest5b>5632</nest5b>
        </nestSequence6b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: long_chain_07
       Schema: multi_A_03.dfdl.xsd
         Root: nestSequence7
      Purpose: This test demonstrates a long chain of declarations that gradually builds an element.
                - In Schema F, a format is defined.
                - In Schema A, a sequence of B elements that reference format F is declared
               This is a test to see if I can access items in Schema F directly from Schema A because of the 
               chain of imports.
  -->
  
  <tdml:parserTestCase name="long_chain_07" root="nestSequence7"
    model="multi_A_03.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[5632]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <nestSequence6b>
          <nest5b>5632</nest5b>
        </nestSequence6b>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  <!--
    Test name: namespace_conflict_01
       Schema: multi_base_04.dfdl.xsd
         Root: aSeq
      Purpose: This test demonstrates a chain of declarations that gradually builds an element.
                - In Schema C, a simpleType is declared and an element defined of that type.
                - In Schema B, a sequence of 3 C elements is declared
                - In Base Schema, a sequence of sequence B is declared
               This is a test to see how having the same prefix set to multiple URIs across schemas is handled.
  -->
  
  <tdml:parserTestCase name="namespace_conflict_01" root="aSeq"
    model="multi_base_04.dfdl.xsd" description="import a schema - DFDL-6-007R">
    <tdml:document><![CDATA[12345.123456.323|13222.764536.400]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <aSeq>
          <bSeq>
            <cElem>12345</cElem>
            <cElem>123456</cElem>
            <cElem>323</cElem>
          </bSeq>
          <bSeq>
            <cElem>13222</cElem>
            <cElem>764536</cElem>
            <cElem>400</cElem>
          </bSeq>
        </aSeq>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

</testSuite>
