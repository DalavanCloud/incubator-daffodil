<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2015 Tresys Technology, LLC. All rights reserved.
   
    Developed by: Tresys Technology, LLC
                  http://www.tresys.com
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal with
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    
     1. Redistributions of source code must retain the above copyright notice,
        this list of conditions and the following disclaimers.
    
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimers in the
        documentation and/or other materials provided with the distribution.
    
     3. Neither the names of Tresys Technology, nor the names of its contributors
        may be used to endorse or promote products derived from this Software
        without specific prior written permission.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
    SOFTWARE.
-->
<tdml:testSuite xmlns:tdml="http://www.ibm.com/xmlns/dfdl/testData"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ex="http://example.com"
  suiteName="textNumberPropsUnparse">

  <tdml:defineSchema name="delimitedStringsPadding">
    <dfdl:format ref="ex:daffodilTest1" encoding="ascii" lengthUnits="bytes" outputNewLine="%CR;%LF;" />

      <xs:element name="e1" dfdl:lengthKind="implicit" dfdl:initiator="!#" dfdl:terminator="#!">
        <xs:complexType>
          <xs:sequence  dfdl:separator="," >
            <xs:element name="s1" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="left" />
            <xs:element name="s2" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="right"/>
            <xs:element name="s3" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center"/>
          </xs:sequence>
        </xs:complexType>
     </xs:element>
 
      <xs:element name="e2" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence  dfdl:separator="," >
            <xs:element name="s1" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="#" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" />
            <xs:element name="s2" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center"/>
            <xs:element name="s3" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="#" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      
      <xs:element name="e3" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence  dfdl:separator="," >
            <xs:element name="s1" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="#" dfdl:textPadKind="none" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" />
            <xs:element name="s2" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center"/>
            <xs:element name="s3" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="#" dfdl:textPadKind="none" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      
      <xs:element name="e4" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence  dfdl:separator="," >
            <xs:element name="s1" type="st" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="%SP;" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      
      <xs:element name="e5" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence  dfdl:separator="," >
            <xs:element name="s1" type="st10" dfdl:lengthKind="delimited" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:simpleType name="st">
        <xs:restriction base="xs:string">
          <xs:maxLength value="3" />
          <xs:minLength value="3" />
        </xs:restriction>
      </xs:simpleType>
      
      <xs:simpleType name="st10">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10" />
          <xs:minLength value="10" />
        </xs:restriction>
      </xs:simpleType>
      
      <xs:simpleType name="st3to10">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10" />
          <xs:minLength value="3" />
        </xs:restriction>
      </xs:simpleType>
      
      <xs:element name="e6" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="10" dfdl:truncateSpecifiedLengthString="yes" dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" />

      <xs:element name="e7" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="10" dfdl:truncateSpecifiedLengthString="yes" dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="left" />
      
      <xs:element name="e8" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="10" dfdl:truncateSpecifiedLengthString="yes" dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="right" />
      
      <xs:element name="e9" type="ex:st3to10" dfdl:lengthKind="delimited" dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="right" />
      
      <xs:element name="e10" type="ex:st3to10" dfdl:lengthKind="delimited" dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="center" />
      
      <xs:element name="e11" type="ex:st10" dfdl:lengthKind="explicit" dfdl:length="2" dfdl:textStringPadCharacter="#" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="left" />
      
      <xs:element name="e12" type="ex:st10" dfdl:lengthKind="explicit" dfdl:length="{ 2 }" dfdl:textStringPadCharacter="#" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="left" />
      
      <xs:element name="e13" dfdl:lengthKind="implicit">
        <xs:complexType>
          <xs:sequence  dfdl:separator="," >
            <xs:element name="len" type="xs:int" dfdl:lengthKind="delimited"/>
            <xs:element name="s1" type="st10" dfdl:lengthKind="explicit" dfdl:length="{ ../ex:len }" 
                dfdl:textStringPadCharacter="_" dfdl:textPadKind="padChar" dfdl:textTrimKind="padChar" dfdl:textStringJustification="right" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      
      <xs:simpleType name="st10vals" dfdl:textTrimKind="padChar" dfdl:textPadKind="padChar" dfdl:textStringPadCharacter="*" dfdl:textStringJustification="right">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10" />
          <xs:minLength value="10" />
        </xs:restriction>
      </xs:simpleType>
      
      <xs:element name="e14" type="ex:st10vals" dfdl:lengthKind="delimited" />

      <xs:element name="e15" type="ex:st10" dfdl:lengthKind="delimited" dfdl:textPadKind="padChar" dfdl:textStringPadCharacter="%WSP+;" dfdl:textStringJustification="right" />
      <xs:element name="e16" type="ex:st10" dfdl:lengthKind="delimited" dfdl:textPadKind="padChar" dfdl:textStringPadCharacter="%NL;" dfdl:textStringJustification="right" />
      <xs:element name="e17" type="ex:st10" dfdl:lengthKind="delimited" dfdl:textPadKind="padChar" dfdl:textStringPadCharacter="%ES;" dfdl:textStringJustification="right" />

  </tdml:defineSchema>
  
<!--
      Test Name: unparseDelimitedPaddedString01
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a sequence of delimited strings with padding
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString01" model="delimitedStringsPadding" root="e1" roundTrip="true">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
          <ex:s3>3</ex:s3>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>!#1__,__2,_3_#!</tdml:document>
  </tdml:unparserTestCase>
  
  <tdml:parserTestCase name="parseDelimitedPaddedString01" model="delimitedStringsPadding" root="e1">
    <tdml:document>!#1__,__2,_3_#!</tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
          <ex:s3>3</ex:s3>
        </ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString02
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a sequence of delimited strings with padding
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString02" model="delimitedStringsPadding" root="e2" roundTrip="true">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e2 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
          <ex:s3>3</ex:s3>
        </ex:e2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>#1#,_2_,#3#</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString03
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a sequence of delimited strings with padding, where
               in some cases textPadKind is "none"
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString03" model="delimitedStringsPadding" root="e3" roundTrip="true">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e3 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
          <ex:s2>2</ex:s2>
          <ex:s3>3</ex:s3>
        </ex:e3>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>1,_2_,3</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString04
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a sequence of delimited strings with padding, where the
                padChar is a DFDL character entity (ES)
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString04" model="delimitedStringsPadding" root="e4" roundTrip="true">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e4 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
        </ex:e4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document> 1 </tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString05
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a sequence of delimited strings with padding, where the
                padChar is a DFDL character entity (ES)
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString05" model="delimitedStringsPadding" root="e5" roundTrip="true">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e5 xmlns:ex="http://example.com">
          <ex:s1>1</ex:s1>
        </ex:e5>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>_____1____</tdml:document>
    <!--<tdml:document>____1_____</tdml:document>--> <!-- actual unparsed output currently-->
  </tdml:unparserTestCase>

<!--
      Test Name: unparsePaddedStringTruncate01
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding, where truncateSpecifiedLengthString is set to "yes"
               In this case, the string needs to be truncated, but the justification is "center", so a processing error occurs.
-->
  <tdml:unparserTestCase name="unparsePaddedStringTruncate01" model="delimitedStringsPadding" root="e6">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e6 xmlns:ex="http://example.com">123456789100000</ex:e6>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Unparse Error</tdml:error>
      <tdml:error>textJustificationType is 'center'</tdml:error>
      <tdml:error>value requires truncation to fit within the length</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
      Test Name: unparsePaddedStringTruncate02
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding, where truncateSpecifiedLengthString is set to "yes"
               In this case, the string needs to be truncated and the justification is "left", so the data is truncated from the right.
-->
  <tdml:unparserTestCase name="unparsePaddedStringTruncate02" model="delimitedStringsPadding" root="e7">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e7 xmlns:ex="http://example.com">123456789100000</ex:e7>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>1234567891</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparsePaddedStringTruncate03
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding, where truncateSpecifiedLengthString is set to "yes"
               In this case, the string needs to be truncated and the justification is "right", so the data is truncated from the left.
-->
  <tdml:unparserTestCase name="unparsePaddedStringTruncate03" model="delimitedStringsPadding" root="e8">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e8 xmlns:ex="http://example.com">123456789100000</ex:e8>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>6789100000</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString06
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, we see that the data value is padded to the length given by minLength
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString06" model="delimitedStringsPadding" root="e9">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e9 xmlns:ex="http://example.com">X</ex:e9>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>__X</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString07
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, we see that the data value is padded to the length given by minLength
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString07" model="delimitedStringsPadding" root="e10">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e10 xmlns:ex="http://example.com">X</ex:e10>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>_X_</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString08
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, we see that the data value is padded to the length given by minLength
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString08" model="delimitedStringsPadding" root="e10">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e10 xmlns:ex="http://example.com">_</ex:e10>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>___</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString09
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, lengthKind is explicit and NOT an expression, so the value is padded to the length given by the length property
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString09" model="delimitedStringsPadding" root="e11">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e11 xmlns:ex="http://example.com">O</ex:e11>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>O#</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString10
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, lengthKind is explicit and an expression, so the value is padded to the length given by the value of minLength
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString10" model="delimitedStringsPadding" root="e12">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e12 xmlns:ex="http://example.com">O</ex:e12>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>O#########</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString11
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, the associated properties are all defined on the simpleType and not the element itself.
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString11" model="delimitedStringsPadding" root="e14">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e14 xmlns:ex="http://example.com">0</ex:e14>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document>*********0</tdml:document>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString12
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, the padChar is a DFDL Character class (WSP+), which is not allowed.
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString12" model="delimitedStringsPadding" root="e15">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e15 xmlns:ex="http://example.com">0</ex:e15>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>textStringPadCharacter cannot contain WSP+!</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString13
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, the padChar is a DFDL Character class (NL), which is not allowed.
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString13" model="delimitedStringsPadding" root="e16">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e16 xmlns:ex="http://example.com">0</ex:e16>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>textStringPadCharacter cannot contain NL!</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

<!--
      Test Name: unparseDelimitedPaddedString14
      Schema: delimitedStringsPadding
      Purpose: This test demonstrates unparsing a string with padding
               In this case, the padChar is a DFDL Character class (ES), which is not allowed.
-->
  <tdml:unparserTestCase name="unparseDelimitedPaddedString14" model="delimitedStringsPadding" root="e17">
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e17 xmlns:ex="http://example.com">0</ex:e17>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:errors>
      <tdml:error>Schema Definition Error</tdml:error>
      <tdml:error>textStringPadCharacter cannot contain ES!</tdml:error>
    </tdml:errors>
  </tdml:unparserTestCase>

  <tdml:defineSchema name="pattern">
    <dfdl:format ref="ex:daffodilTest1" lengthKind="delimited" representation="text"
        lengthUnits="bytes" encoding="US-ASCII" initiator="" terminator="" textNumberPattern="#,##0.###;-#,##0.###"
        separator="" textNumberCheckPolicy="lax" ignoreCase="no" textNumberRep="standard"/>

    <xs:element name="e1">
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="1000"/>
          <xs:maxInclusive value="99999"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:element>

  </tdml:defineSchema>
  
  <tdml:unparserTestCase name="unparse_int_01" root="e1"
    model="pattern" description="">

    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>1576</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
    <tdml:document><![CDATA[1,576]]></tdml:document>
  </tdml:unparserTestCase>

  <tdml:parserTestCase name="parse_int_01" root="e1"
    model="pattern" description="" roundTrip="true">

    <tdml:document><![CDATA[1576]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:e1>1576</ex:e1>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>

</tdml:testSuite>
