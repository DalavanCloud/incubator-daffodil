package edu.illinois.ncsa.daffodil.japi.debugger

/**
 * Abstract debugger runner, which can be implemented to create a custom debugger runner
 */
abstract class DebuggerRunner {
  /**
   * Called once at the beginning of a parse, allowing one to perform any
   * initialization steps that may be necessary.
   */
  def init(): Unit

  /**
   * Called by Daffodil when there is a pause in parsing to determine what
   * debugger actions should be taken.

   * @see <a target="_blank" href='https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Interactive+Debugger'>Daffodil Interactive Debugger</a> - debugger commands
   *
   * @return a debugger command that tells the Daffodil debugger what step to
   *         take next.
   */
  def getCommand(): String

  /**
   * Called by Daffodil when a debugger command has produce output. This method
   * is called once for every line produced by the Daffodil debugger.
   *
   * @param line a single line of output generated by the Daffodil debugger
   */
  def lineOutput(line: String): Unit

  /**
   * Called once upon completion of a parse, allowing one to perform any
   * steps necessary to clean up the debugger runner.
   */
  def fini(): Unit
}

/* 
 * The below class is empty and is not ever actually used. It is just a place
 * holder. Whenever the Java API uses it, it is translated to the appropriate
 * Scala debugger runner. It is marked final so that it cannot be extended,
 * since the Scala pattern matcher would still match and use the equivalent
 * Scala trace runner and lose any added functionality. One must extend the
 * DebuggerRunner to create their own debugger runner.
 */

/**
 * [[DebuggerRunner]] that writes verbose information about parsing to stdout
 */
final class TraceDebuggerRunner extends DebuggerRunner {
  def init(): Unit = {}
  def getCommand(): String = ""
  def lineOutput(line: String) = {}
  def fini(): Unit = {}
}

