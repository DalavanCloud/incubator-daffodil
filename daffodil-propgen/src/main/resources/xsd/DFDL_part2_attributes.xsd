<?xml version="1.0" encoding="UTF-8"?>
<!--
 	******************************************************************
	* (C) Copyright IBM Corp 2011
	* All Rights Reserved
	*
	* This XML schema is 2 of 3 that defines the syntax of DFDL annotations. 
	* It defines an attribute for each DFDL property.
	* Note that each attribute actually is defined twice, once for
	* "attribute form" and once for "short form".
	*
	* DFDL Version 1.0
	* Schema Version 1.0
 	******************************************************************
 -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.ogf.org/dfdl/dfdl-1.0/" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema XMLSchema.xsd ">
	
	<xsd:include schemaLocation="DFDL_part1_simpletypes.xsd"/>
	
	<!-- ==================================================================== -->
	<!-- Basic Attributes and Attribute Groups representing DFDL properties   -->
	<!-- ==================================================================== -->

	<xsd:attribute name="ref" type="xsd:QName"/>
	
	<xsd:attributeGroup name="BaseAG">
		<xsd:attribute name="ref" type="xsd:QName"/>
	</xsd:attributeGroup>
	
	<!-- 11 Properties Common to Both Content and Framing -->
	<xsd:attribute name="byteOrder" type="dfdl:ByteOrderEnum_Or_DFDLExpression"/>
	<xsd:attribute name="encoding" type="dfdl:EncodingEnum_Or_DFDLExpression"/>
	<xsd:attribute name="utf16Width" type="dfdl:UTF16WidthEnum"/>
	<xsd:attribute name="ignoreCase" type="dfdl:YesNoEnum"/>

	<xsd:attributeGroup name="CommonAG">
		<xsd:attribute name="byteOrder" type="dfdl:ByteOrderEnum_Or_DFDLExpression"/>
		<xsd:attribute name="encoding" type="dfdl:EncodingEnum_Or_DFDLExpression"/>
		<xsd:attribute name="utf16Width" type="dfdl:UTF16WidthEnum"/>
		<xsd:attribute name="ignoreCase" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>

	<!-- 12.1 Aligned Data-->
	<xsd:attribute name="alignment" type="dfdl:AlignmentType"/>
	<xsd:attribute name="alignmentUnits" type="dfdl:AlignmentUnitsEnum"/>
	<xsd:attribute name="fillByte" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="leadingSkip" type="dfdl:DFDLNonNegativeInteger"/>
	<xsd:attribute name="trailingSkip" type="dfdl:DFDLNonNegativeInteger"/>

	<xsd:attributeGroup name="AlignmentAG">
		<xsd:attribute name="alignment" type="dfdl:AlignmentType"/>
		<xsd:attribute name="alignmentUnits" type="dfdl:AlignmentUnitsEnum"/>
		<xsd:attribute name="fillByte" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="leadingSkip" type="dfdl:DFDLNonNegativeInteger"/>
		<xsd:attribute name="trailingSkip" type="dfdl:DFDLNonNegativeInteger"/>
	</xsd:attributeGroup>

	<!-- 12.2 Delimiters and Text Mark up -->
      <xsd:attribute name="initiator" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="terminator" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="outputNewLine" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="emptyValueDelimiterPolicy" type="dfdl:EmptyValueDelimiterPolicyEnum" />

	<xsd:attributeGroup name="MarkupAG">
		<xsd:attribute name="initiator" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="terminator" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="outputNewLine" type="dfdl:DFDLStringLiteral"/>
	</xsd:attributeGroup>

	<xsd:attributeGroup name="NonGroupMarkupAG">
		<xsd:attribute name="emptyValueDelimiterPolicy" type="dfdl:EmptyValueDelimiterPolicyEnum" />
	</xsd:attributeGroup>
	
	<!-- 12.3 Length Properties -->
	<xsd:attribute name="lengthKind" type="dfdl:LengthKindEnum"/>
	<xsd:attribute name="length" type="dfdl:DFDLNonNegativeInteger_Or_DFDLExpression"/>
	<xsd:attribute name="lengthPattern" type="dfdl:DFDLRegularExpression"/>
	<xsd:attribute name="lengthUnits" type="dfdl:LengthUnitsEnum"/>
	<xsd:attribute name="prefixIncludesPrefixLength" type="dfdl:YesNoEnum"/>
	<xsd:attribute name="prefixLengthType" type="xsd:QName"/>

	<xsd:attributeGroup name="LengthAG">
		<xsd:attribute name="lengthKind" type="dfdl:LengthKindEnum"/>
		<xsd:attribute name="length" type="dfdl:DFDLNonNegativeInteger_Or_DFDLExpression"/>
		<xsd:attribute name="lengthPattern" type="dfdl:DFDLRegularExpression"/>
		<xsd:attribute name="lengthUnits" type="dfdl:LengthUnitsEnum"/>
		<xsd:attribute name="prefixIncludesPrefixLength" type="dfdl:YesNoEnum"/>
		<xsd:attribute name="prefixLengthType" type="xsd:QName"/>
	</xsd:attributeGroup>

	<!-- 13 Simple Types-->
	<xsd:attribute name="representation" type="dfdl:RepresentationEnum"/>
	
	<xsd:attributeGroup name="RepresentationAG">
		<xsd:attribute name="representation" type="dfdl:RepresentationEnum"/>
	</xsd:attributeGroup>
	
	<!-- 14.4 Simple or complex local element or element reference -->
	<xsd:attribute name="floating" type="dfdl:YesNoEnum"/>
	
	<xsd:attributeGroup name="FloatingAG">
		<xsd:attribute name="floating" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>

	<!--13.2 Properties Common to All Simple Types with Text representation-->
	<xsd:attribute name="textPadKind" type="dfdl:TextPadKindEnum"/>
	<xsd:attribute name="textTrimKind" type="dfdl:TextTrimKindEnum"/>	
	<xsd:attribute name="textOutputMinLength" type="dfdl:DFDLNonNegativeInteger"/>
	<xsd:attribute name="escapeSchemeRef" type="xsd:QName"/>
	
	<xsd:attributeGroup name="SimpleTypesTextAG">
		<xsd:attribute name="textPadKind" type="dfdl:TextPadKindEnum"/>
		<xsd:attribute name="textTrimKind" type="dfdl:TextTrimKindEnum"/>
		<xsd:attribute name="textOutputMinLength" type="dfdl:DFDLNonNegativeInteger"/>
		<xsd:attribute name="escapeSchemeRef" type="dfdl:DFDLQName"/>
	</xsd:attributeGroup>

	<!-- 13.2.1 Escape Scheme -->
	<!-- Note that these can never appear in short form -->
	<xsd:attributeGroup name="EscapeSchemeAG">
		<xsd:attribute name="escapeKind" type="dfdl:EscapeKindEnum"/>
		<xsd:attribute name="escapeCharacter" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="escapeBlockStart" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="escapeBlockEnd" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="escapeEscapeCharacter" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="extraEscapedCharacters" type="dfdl:ListOfDFDLStringLiteral"/>
		<xsd:attribute name="generateEscapeBlock" type="dfdl:GenerateEscapeEnum"/>
	</xsd:attributeGroup>

	<!-- 13.3 Properties for Bidirectional support for all Simple Types with Text representation -->
	<xsd:attribute name="textBidi" type="dfdl:YesNoEnum"/>
	<xsd:attribute name="textBidiTextOrdering" type="dfdl:TextBidiTextOrderingEnum"/>
	<xsd:attribute name="textBidiOrientation" type="dfdl:TextBidiOrientationEnum"/>
	<xsd:attribute name="textBidiSymmetric" type="dfdl:YesNoEnum"/>
	<xsd:attribute name="textBidiTextShaped" type="dfdl:YesNoEnum"/>
	<xsd:attribute name="textBidiNumeralShapes" type="dfdl:TextBidiNumeralShapesEnum"/>

	<xsd:attributeGroup name="TextBidiSchemeAG">
		<xsd:attribute name="textBidi" type="dfdl:YesNoEnum"/>
		<xsd:attribute name="textBidiTextOrdering" type="dfdl:TextBidiTextOrderingEnum"/>
		<xsd:attribute name="textBidiOrientation" type="dfdl:TextBidiOrientationEnum"/>
		<xsd:attribute name="textBidiSymmetric" type="dfdl:YesNoEnum"/>
		<xsd:attribute name="textBidiTextShaped" type="dfdl:YesNoEnum"/>
		<xsd:attribute name="textBidiNumeralShapes" type="dfdl:TextBidiNumeralShapesEnum"/>
	</xsd:attributeGroup>

	<!-- 13.4 Properties Specific to Strings with Text representation  -->
	<xsd:attribute name="textStringJustification" type="dfdl:TextStringJustificationEnum"/>
	<xsd:attribute name="textStringPadCharacter" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="truncateSpecifiedLengthString" type="dfdl:YesNoEnum"/>

	<xsd:attributeGroup name="StringTextAG">
		<xsd:attribute name="textStringJustification" type="dfdl:TextStringJustificationEnum"/>
		<xsd:attribute name="textStringPadCharacter" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="truncateSpecifiedLengthString" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>
	
	<!-- Properties Specific to Number with Text or Binary representation -->
	<xsd:attribute name="decimalSigned" type="dfdl:YesNoEnum"/>

	<xsd:attributeGroup name="NumberAG">
		<xsd:attribute name="decimalSigned" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>
	
	<!-- Properties Specific to Number with Text representation -->
	<xsd:attribute name="textNumberRep" type="dfdl:TextNumberRepEnum"/>
	<xsd:attribute name="textNumberJustification" type="dfdl:TextNumberJustificationEnum"/>
	<xsd:attribute name="textNumberPadCharacter" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="textStandardBase" type="dfdl:TextNumberBaseEnum"/>

	<xsd:attributeGroup name="NumberTextAG">
		<xsd:attribute name="textNumberRep" type="dfdl:TextNumberRepEnum"/>
		<xsd:attribute name="textNumberJustification" type="dfdl:TextNumberJustificationEnum"/>
		<xsd:attribute name="textNumberPadCharacter" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="textStandardBase" type="dfdl:TextNumberBaseEnum"/>
	</xsd:attributeGroup>

	<!-- Text number format attributes -->
	<xsd:attribute name="textNumberPattern" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="textStandardGroupingSeparator" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="textStandardDecimalSeparator" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="textStandardExponentCharacter" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="textNumberCheckPolicy" type="dfdl:TextNumberCheckPolicyEnum"/>
	<xsd:attribute name="textStandardInfinityRep" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="textStandardNaNRep" type="dfdl:DFDLStringLiteral"/>	
	<xsd:attribute name="textNumberRoundingMode" type="dfdl:TextNumberRoundingModeEnum"/>
	<xsd:attribute name="textNumberRounding" type="dfdl:TextNumberRoundingEnum"/>
	<xsd:attribute name="textNumberRoundingIncrement" type="xsd:double"/>
	<xsd:attribute name="textZonedSignStyle" type="dfdl:TextZonedSignStyleEnum"/>
	<xsd:attribute name="textStandardZeroRep" type="dfdl:ListOfDFDLStringLiteral"/>

	<xsd:attributeGroup name="TextNumberFormatAG">
		<xsd:attribute name="textNumberPattern" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="textStandardGroupingSeparator" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="textStandardDecimalSeparator" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="textStandardExponentCharacter" type="dfdl:DFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="textNumberCheckPolicy" type="dfdl:TextNumberCheckPolicyEnum"/>
		<xsd:attribute name="textStandardInfinityRep" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="textStandardNaNRep" type="dfdl:DFDLStringLiteral"/>		
		<xsd:attribute name="textNumberRoundingMode" type="dfdl:TextNumberRoundingModeEnum"/>
		<xsd:attribute name="textNumberRounding" type="dfdl:TextNumberRoundingEnum"/>
		<xsd:attribute name="textNumberRoundingIncrement" type="xsd:double"/>
		<xsd:attribute name="textZonedSignStyle" type="dfdl:TextZonedSignStyleEnum"/>
		<xsd:attribute name="textStandardZeroRep" type="dfdl:ListOfDFDLStringLiteral"/>
	</xsd:attributeGroup>

	<!-- 13.6 Properties Specific to Number with Binary representation-->
	<xsd:attribute name="binaryNumberRep" type="dfdl:BinaryNumberRepEnum"/>
	<xsd:attribute name="binaryDecimalVirtualPoint" type="xsd:int"/>
	<xsd:attribute name="binaryPackedSignCodes" type="dfdl:BinaryPackedSignCodes"/>
	<xsd:attribute name="binaryNumberCheckPolicy" type="dfdl:BinaryNumberCheckPolicyEnum"/>

	<xsd:attributeGroup name="NumberBinaryAG">
		<xsd:attribute name="binaryNumberRep" type="dfdl:BinaryNumberRepEnum"/>
		<xsd:attribute name="binaryDecimalVirtualPoint" type="xsd:int"/>
		<xsd:attribute name="binaryPackedSignCodes" type="dfdl:BinaryPackedSignCodes"/>
		<xsd:attribute name="binaryNumberCheckPolicy" type="dfdl:BinaryNumberCheckPolicyEnum"/>
	</xsd:attributeGroup>

	<!-- 13.7 Float/Double with Binary representation -->
	<xsd:attribute name="binaryFloatRep" type="dfdl:BinaryFloatRepEnum_Or_DFDLExpression"/>

	<xsd:attributeGroup name="FloatBinaryAG">
		<xsd:attribute name="binaryFloatRep" type="dfdl:BinaryFloatRepEnum_Or_DFDLExpression"/>
	</xsd:attributeGroup>

	<!-- 13.8 Properties Specific to Boolean with Text representation -->
	<xsd:attribute name="textBooleanTrueRep" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="textBooleanFalseRep" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="textBooleanJustification" type="dfdl:TextBooleanJustificationEnum"/>
	<xsd:attribute name="textBooleanPadCharacter" type="dfdl:DFDLStringLiteral"/>

	<xsd:attributeGroup name="BooleanTextAG">
		<xsd:attribute name="textBooleanTrueRep" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="textBooleanFalseRep" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="textBooleanJustification" type="dfdl:TextBooleanJustificationEnum"/>
		<xsd:attribute name="textBooleanPadCharacter" type="dfdl:DFDLStringLiteral"/>
	</xsd:attributeGroup>

	<!-- 13.9 Properties Specific to Boolean with Binary representation -->
	<xsd:attribute name="binaryBooleanTrueRep" type="dfdl:DFDLNonNegativeInteger"/>
	<xsd:attribute name="binaryBooleanFalseRep" type="dfdl:DFDLNonNegativeInteger"/>

	<xsd:attributeGroup name="BooleanBinaryAG">
		<xsd:attribute name="binaryBooleanTrueRep" type="dfdl:DFDLNonNegativeInteger"/>
		<xsd:attribute name="binaryBooleanFalseRep" type="dfdl:DFDLNonNegativeInteger"/>
	</xsd:attributeGroup>

	<!-- 13.10	Properties Specific to Calendar Format -->
	<xsd:attribute name="calendarPattern" type="dfdl:DFDLStringLiteral"/>
	<xsd:attribute name="calendarPatternKind" type="dfdl:CalendarPatternKindEnum"/>
	<xsd:attribute name="calendarCheckPolicy" type="dfdl:CalendarCheckPolicyEnum"/>
	<xsd:attribute name="calendarTimeZone" type="dfdl:CalendarTimeZoneType"/>
	<xsd:attribute name="calendarObserveDST" type="dfdl:YesNoEnum"/>
	<xsd:attribute name="calendarFirstDayOfWeek" type="dfdl:CalendarFirstDayOfWeekEnum"/>
	<xsd:attribute name="calendarDaysInFirstWeek" type="dfdl:CalendarDaysInFirstWeek"/>
	<xsd:attribute name="calendarCenturyStart" type="dfdl:CalendarCenturyStart"/>
	<xsd:attribute name="calendarLanguage" type="dfdl:CalendarLanguageType"/>

	<xsd:attributeGroup name="CalendarFormatAG">
		<xsd:attribute name="calendarPattern" type="dfdl:DFDLStringLiteral"/>
		<xsd:attribute name="calendarPatternKind" type="dfdl:CalendarPatternKindEnum"/>
		<xsd:attribute name="calendarCheckPolicy" type="dfdl:CalendarCheckPolicyEnum"/>
		<xsd:attribute name="calendarTimeZone" type="dfdl:CalendarTimeZoneType"/>
		<xsd:attribute name="calendarObserveDST" type="dfdl:YesNoEnum"/>		
		<xsd:attribute name="calendarFirstDayOfWeek" type="dfdl:CalendarFirstDayOfWeekEnum"/>
		<xsd:attribute name="calendarDaysInFirstWeek" type="dfdl:CalendarDaysInFirstWeek"/>
		<xsd:attribute name="calendarCenturyStart" type="dfdl:CalendarCenturyStart"/>
		<xsd:attribute name="calendarLanguage" type="dfdl:CalendarLanguageType"/>
	</xsd:attributeGroup>

	<!-- 13.11 Properties Specific to Calendar with Text Representation -->
	<xsd:attribute name="textCalendarJustification" type="dfdl:TextCalendarJustificationEnum"/>
	<xsd:attribute name="textCalendarPadCharacter" type="dfdl:DFDLStringLiteral"/>

	<xsd:attributeGroup name="CalendarTextAG">
		<xsd:attribute name="textCalendarJustification" type="dfdl:TextCalendarJustificationEnum"/>
		<xsd:attribute name="textCalendarPadCharacter" type="dfdl:DFDLStringLiteral"/>
	</xsd:attributeGroup>

	<!-- 13.12 Properties Specific to Calendar with Binary Representation -->
	<xsd:attribute name="binaryCalendarRep" type="dfdl:BinaryCalendarRepEnum"/>
	<xsd:attribute name="binaryCalendarEpoch" type="xsd:string"/> 

	<xsd:attributeGroup name="CalendarBinaryAG">
		<xsd:attribute name="binaryCalendarRep" type="dfdl:BinaryCalendarRepEnum"/>
		<xsd:attribute name="binaryCalendarEpoch" type="xsd:string"/>
	</xsd:attributeGroup>

	<!-- 13.13	Properties Specific to Opaque Types (hexBinary) -->
	<xsd:attributeGroup name="OpaqueAG">
	</xsd:attributeGroup>

	<!-- 13.14 Properties for Nillable Elements -->
	<xsd:attribute name="nilKind" type="dfdl:NilKindEnum"/>
	<xsd:attribute name="nilValue" type="dfdl:ListOfDFDLStringLiteral"/>
	<xsd:attribute name="nilValueDelimiterPolicy" type="dfdl:NilValueDelimiterPolicyEnum"/>

	<xsd:attributeGroup name="NillableAG">
		<xsd:attribute name="nilKind" type="dfdl:NilKindEnum"/>
		<xsd:attribute name="nilValue" type="dfdl:ListOfDFDLStringLiteral"/>
		<xsd:attribute name="nilValueDelimiterPolicy" type="dfdl:NilValueDelimiterPolicyEnum"/>
	</xsd:attributeGroup>

	<!-- 13.15 Properties for Default Value Control -->
	<xsd:attribute name="useNilForDefault" type="dfdl:YesNoEnum"/>

	<xsd:attributeGroup name="DefaultValueControlAG">
		<xsd:attribute name="useNilForDefault" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>
 
	<!-- 14 Sequence Groups -->
	<xsd:attribute name="sequenceKind" type="dfdl:SequenceKindEnum"/>
	<xsd:attribute name="hiddenGroupRef" type="xsd:QName"/>

	<xsd:attributeGroup name="SequenceAG">
		<xsd:attribute name="sequenceKind" type="dfdl:SequenceKindEnum"/>
		<xsd:attribute name="hiddenGroupRef" type="xsd:QName"/>
	</xsd:attributeGroup>

	<!-- 14.2 Sequence Groups with Delimiters-->
	<xsd:attribute name="separator" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
	<xsd:attribute name="separatorPosition" type="dfdl:SeparatorPositionEnum"/>
	<xsd:attribute name="separatorPolicy" type="dfdl:SeparatorPolicyEnum"/>

	<xsd:attributeGroup name="SeparatorAG">
		<xsd:attribute name="separator" type="dfdl:ListOfDFDLStringLiteral_Or_DFDLExpression"/>
		<xsd:attribute name="separatorPosition" type="dfdl:SeparatorPositionEnum"/>
		<xsd:attribute name="separatorPolicy" type="dfdl:SeparatorPolicyEnum"/>
	</xsd:attributeGroup>
	
	<xsd:attribute name="initiatedContent" type="dfdl:YesNoEnum"/>
	<xsd:attributeGroup name="GroupCommonAG">
		<xsd:attribute name="initiatedContent" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>

	<!-- 15 Choices-->
	<xsd:attribute name="choiceLengthKind" type="dfdl:ChoiceLengthKindEnum"/>
	<xsd:attribute name="choiceLength" type="dfdl:DFDLNonNegativeInteger"/>

	<xsd:attributeGroup name="ChoiceAG">
		<xsd:attribute name="choiceLengthKind" type="dfdl:ChoiceLengthKindEnum"/>
		<xsd:attribute name="choiceLength" type="dfdl:DFDLNonNegativeInteger"/>
	</xsd:attributeGroup>

	<!--16 Arrays and Optional Elements: Properties for Repeating and Variable-Occurrence Data Items-->
	<xsd:attribute name="occursCountKind" type="dfdl:OccursCountKindEnum"/>
	<xsd:attribute name="occursCount" type="dfdl:DFDLExpression"/>
	<xsd:attribute name="occursStopValue" type="dfdl:ListOfDFDLStringLiteral"/>

	<xsd:attributeGroup name="OccursAG">
		<xsd:attribute name="occursCountKind" type="dfdl:OccursCountKindEnum"/>
		<xsd:attribute name="occursCount" type="dfdl:DFDLExpression"/>
		<xsd:attribute name="occursStopValue" type="dfdl:ListOfDFDLStringLiteral"/>
	</xsd:attributeGroup>

	<!-- 19	Calculated Value Properties.-->
	<xsd:attribute name="inputValueCalc" type="dfdl:DFDLExpression"/>
	<xsd:attribute name="outputValueCalc" type="dfdl:DFDLExpression"/>

	<xsd:attributeGroup name="CalculatedValueAG">
		<xsd:attribute name="inputValueCalc" type="dfdl:DFDLExpression"/>
		<xsd:attribute name="outputValueCalc" type="dfdl:DFDLExpression"/>
	</xsd:attributeGroup>

	<!-- document only markup properties -->
	<xsd:attribute name="documentFinalTerminatorCanBeMissing" type="dfdl:YesNoEnum"/>
	
	<xsd:attributeGroup name="DocumentPropertiesAG">
		<xsd:attribute name="documentFinalTerminatorCanBeMissing" type="dfdl:YesNoEnum"/>
	</xsd:attributeGroup>
	
	
	<!-- ========================================================== -->
	<!-- Enumeration of simple name of all DFDL properties that can -->
	<!-- appear in element form.                                    -->
	<!-- ========================================================== -->

	<xsd:simpleType name="PropertyNameType">
		<xsd:restriction base="xsd:string">

			<!-- List of properties that are string types -->
			<xsd:enumeration value="initiator"/>
			<xsd:enumeration value="terminator"/>
			<xsd:enumeration value="documentFinalTerminatorCanBeMissing"/>
			<xsd:enumeration value="outputNewLine"/>
			<xsd:enumeration value="length"/>
			<xsd:enumeration value="lengthPattern"/>
			<xsd:enumeration value="textStringPadCharacter"/>
			<xsd:enumeration value="textNumberPadCharacter"/>
			<xsd:enumeration value="textCalendarPadCharacter"/>
			<xsd:enumeration value="textBooleanPadCharacter"/>
			<xsd:enumeration value="escapeCharacter"/>
			<xsd:enumeration value="escapeBlockStart"/>
			<xsd:enumeration value="escapeBlockEnd"/>
			<xsd:enumeration value="escapeEscapeCharacter"/>
			<xsd:enumeration value="extraEscapedCharacters"/>
			<xsd:enumeration value="textNumberPattern"/>
			<xsd:enumeration value="textStandardGroupingSeparator"/>
			<xsd:enumeration value="textStandardDecimalSeparator"/>
			<xsd:enumeration value="textStandardExponentCharacter"/>
			<xsd:enumeration value="textStandardInfinityRep"/>
			<xsd:enumeration value="textStandardNaNRep"/>
			<xsd:enumeration value="textStandardZeroRep"/>
			<xsd:enumeration value="textBooleanTrueRep"/>
			<xsd:enumeration value="textBooleanFalseRep"/>
			<xsd:enumeration value="calendarPattern"/>
			<xsd:enumeration value="calendarLanguage"/>
			<xsd:enumeration value="binaryCalendarEpoch"/>
			<xsd:enumeration value="nilValue"/>
			<xsd:enumeration value="separator"/>
			<xsd:enumeration value="occursStopValue"/>
			<xsd:enumeration value="inputValueCalc"/>
			<xsd:enumeration value="outputValueCalc"/>

        	      <!-- Bidirectional Properties for all Simple Types with Text representation -->
	      	<xsd:enumeration value="textBidi" />
	        	<xsd:enumeration value="textBidiTextOrdering" />
	        	<xsd:enumeration value="textBidiOrientation" />
	        	<xsd:enumeration value="textBidiSymmetric" />
	        	<xsd:enumeration value="textBidiTextShaped" />
	        	<xsd:enumeration value="textBidiNumeralShapes" />

			<!-- List of properties with non-string types -->
			<xsd:enumeration value="byteOrder"/>
			<xsd:enumeration value="encoding"/>
			<xsd:enumeration value="utf16Width"/>
			<xsd:enumeration value="ignoreCase"/>

			<xsd:enumeration value="alignment"/>
			<xsd:enumeration value="alignmentUnits"/>
			<xsd:enumeration value="fillByte"/>
			<xsd:enumeration value="leadingSkip"/>
			<xsd:enumeration value="trailingSkip"/>

			<xsd:enumeration value="lengthKind"/>
			<xsd:enumeration value="lengthUnits"/>

			<xsd:enumeration value="prefixIncludesPrefixLength"/>
			<xsd:enumeration value="prefixLengthType"/>

			<xsd:enumeration value="representation"/>

			<xsd:enumeration value="textPadKind"/>
			<xsd:enumeration value="textTrimKind"/>
			<xsd:enumeration value="textOutputMinLength"/>

			<xsd:enumeration value="escapeKind"/>
			<xsd:enumeration value="generateEscapeBlock"/>

			<xsd:enumeration value="textStringJustification"/>
			<xsd:enumeration value="textNumberRep"/>
			<xsd:enumeration value="textNumberJustification"/>		

			<xsd:enumeration value="textNumberCheckPolicy"/>
			<xsd:enumeration value="textStandardBase"/>
			<xsd:enumeration value="textNumberRoundingMode"/>
			<xsd:enumeration value="textNumberRounding"/>
			<xsd:enumeration value="textNumberRoundingIncrement"/>
			<xsd:enumeration value="textZonedSignStyle"/>	

			<xsd:enumeration value="binaryNumberRep"/>
			<xsd:enumeration value="binaryDecimalVirtualPoint"/>
			<xsd:enumeration value="binaryNumberCheckPolicy"/>
			<xsd:enumeration value="binaryPackedSignCodes"/>
			<xsd:enumeration value="binaryFloatRepresentation"/>	

			<xsd:enumeration value="textBooleanJustification"/>

			<xsd:enumeration value="integerBooleanTrueRep"/>
			<xsd:enumeration value="integerBooleanFalseRep"/>	

			<xsd:enumeration value="textCalendarJustification"/>

			<xsd:enumeration value="calendarPatternKind"/>
			<xsd:enumeration value="calendarCheckPolicy"/>
			<xsd:enumeration value="calendarTimeZone"/>
			<xsd:enumeration value="calendarObserveDST"/>			
			<xsd:enumeration value="calendarFirstDayOfWeek"/>
			<xsd:enumeration value="calendarDaysInFirstWeek"/>
			<xsd:enumeration value="calendarCenturyStart"/>		
			<xsd:enumeration value="binaryCalendarRep"/>

			<xsd:enumeration value="nilKind"/>
			<xsd:enumeration value="nilValueDelimiterPolicy"/>

			<xsd:enumeration value="useNilForDefault"/>
			<xsd:enumeration value="emptyValueDelimiterPolicy"/>

			<xsd:enumeration value="sequenceKind"/>
			<xsd:enumeration value="hiddenGroupRef"/>
			<xsd:enumeration value="initiatedContent"/>

			<xsd:enumeration value="separatorPosition"/>
			<xsd:enumeration value="separatorPolicy"/>

			<xsd:enumeration value="choiceLengthKind"/>
			<xsd:enumeration value="choiceLength"/>

			<xsd:enumeration value="occursCountKind"/>
			<xsd:enumeration value="occursCount"/>
			
			<xsd:enumeration value="floating"/>
			<xsd:enumeration value="truncateSpecifiedLengthString"/>
					
			<xsd:enumeration value="decimalSigned"/>
		</xsd:restriction>
	</xsd:simpleType>
	
</xsd:schema>
